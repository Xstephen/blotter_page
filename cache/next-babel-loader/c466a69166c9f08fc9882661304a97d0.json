{"ast":null,"code":"import \"antd/lib/table/style/css\";\nimport _Table from \"antd/lib/table\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { DndProvider, DragSource, DropTarget } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\n\nclass Row extends React.Component {\n  render() {\n    var {\n      connectDragSource,\n      connectDropTarget\n    } = this.props;\n\n    var style = _objectSpread({}, this.props.style, {\n      cursor: 'move'\n    });\n\n    return connectDragSource(connectDropTarget(__jsx(\"tr\", _extends({}, this.props, {\n      style: style\n    }))));\n  }\n\n}\n\nconst dragSource = DragSource('row', {\n  beginDrag(props) {\n    return {\n      index: props.index\n    };\n  }\n\n}, connect => ({\n  connectDragSource: connect.dragSource()\n}))(Row);\nconst DraggablRow = DropTarget('row', {\n  drop(props, monitor) {\n    const dragIndex = monitor.getItem().index;\n    const hoverIndex = props.index;\n\n    if (dragIndex === hoverIndex) {\n      return;\n    }\n\n    props.moveRow(dragIndex, hoverIndex);\n    monitor.getItem().index = hoverIndex;\n  }\n\n}, (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver()\n}))(dragSource);\nexport default class DraggableTable extends React.Component {\n  render() {\n    return __jsx(DndProvider, {\n      backend: HTML5Backend\n    }, __jsx(_Table, _extends({}, this.props, {\n      // 替换Row\n      components: {\n        body: {\n          row: DraggablRow\n        }\n      },\n      onRow: (record, index) => ({\n        index,\n        onClick: event => {},\n        onDoubleClick: event => {},\n        onContextMenu: event => {},\n        onMouseEnter: event => {},\n        onMouseLeave: event => {},\n        moveRow: this.props.moveRow\n      })\n    })));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}