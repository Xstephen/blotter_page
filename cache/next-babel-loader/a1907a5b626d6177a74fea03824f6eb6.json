{"ast":null,"code":"import \"antd/lib/list/style/css\";\nimport _List from \"antd/lib/list\";\nimport \"antd/lib/tooltip/style/css\";\nimport _Tooltip from \"antd/lib/tooltip\";\nimport \"antd/lib/comment/style/css\";\nimport _Comment from \"antd/lib/comment\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/popover/style/css\";\nimport _Popover from \"antd/lib/popover\";\nimport \"antd/lib/checkbox/style/css\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport \"antd/lib/form/style/css\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/input/style/css\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/avatar/style/css\";\nimport _Avatar from \"antd/lib/avatar\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Fragment } from 'react';\nimport { Icon } from '@ant-design/compatible';\nimport moment from 'moment';\nimport { comments, avatar, addComment } from '@/utils/api';\nimport { Context } from '@/utils/global';\nimport ShowNotification from '@/utils/notification';\n\nvar adWarning = __jsx(\"b\", null, \"\\u5E7F\\u544A\\u8BC4\\u8BBA\\uFF0C\\u5DF2\\u88AB\\u5C4F\\u853D\");\n\nvar delWarning = __jsx(\"b\", null, \"\\u8BE5\\u8BC4\\u8BBA\\u5DF2\\u88AB\\u5220\\u9664\");\n\nvar defaultAvatar = 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png';\n\nvar CommentPart = /*#__PURE__*/function (_React$Component) {\n  _inherits(CommentPart, _React$Component);\n\n  function CommentPart(props) {\n    var _this;\n\n    _classCallCheck(this, CommentPart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommentPart).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"initialComment\", function () {\n      _this.setState({\n        loading: true\n      });\n\n      comments(_this.props.url, function (data) {\n        _this.setState(function () {\n          return {\n            total: data.total,\n            comments: data.comments.reverse(),\n            loading: false\n          };\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onReplyClick\", function (id, reply) {\n      _this.setState(function (state) {\n        state.reply[id] = reply;\n        return {\n          reply: state.reply\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onEmailBlur\", function (id, formRef) {\n      avatar(formRef.current.getFieldValue(\"email\"), function (data) {\n        return _this.setState(function (state) {\n          state.avatar[id] = data.avatar;\n          return state;\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmitClick\", function _callee(id, formRef) {\n      var value, r;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(formRef.current.validateFields(['email', 'content', 'recv']));\n\n            case 2:\n              value = _context.sent;\n\n              _this.setState(function (state) {\n                state.editor_loading[id] = true;\n                return state;\n              });\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(addComment({\n                url: _this.props.url,\n                reply: id,\n                email: value['email'],\n                recv: value['recv'],\n                raw: value['content']\n              }));\n\n            case 6:\n              r = _context.sent;\n\n              if (ShowNotification(r)) {\n                //   formRef.current.resetFields(['email', 'recv', 'content']);\n                _this.initialComment();\n              }\n\n              _this.setState(function (state) {\n                state.editor_loading[id] = false;\n                state.reply[id] = !r.success;\n                return state;\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, _Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"render_avatar\", function (avatar) {\n      return __jsx(_Avatar, {\n        src: avatar ? avatar : defaultAvatar\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"render_editor\", function (id) {\n      var formRef = React.createRef();\n\n      var onSubmitClick = function onSubmitClick() {\n        _this.onSubmitClick(id, formRef);\n      };\n\n      var onEmailBlur = function onEmailBlur() {\n        _this.onEmailBlur(id, formRef);\n      };\n\n      return __jsx(_Comment, {\n        avatar: _this.render_avatar(_this.state.avatar[id]),\n        content: __jsx(_Form, {\n          ref: formRef,\n          initialValues: {\n            recv: true,\n            email: '',\n            content: ''\n          }\n        }, __jsx(_Form.Item, {\n          name: \"email\",\n          rules: [{\n            type: 'email',\n            message: '邮箱地址不合法'\n          }, {\n            required: true,\n            message: '你需要输入邮箱来表明你的身份'\n          }]\n        }, __jsx(_Input, {\n          onBlur: onEmailBlur,\n          placeholder: \"\\u8F93\\u5165\\u60A8\\u7684\\u90AE\\u7BB1(\\u4EC5\\u7528\\u4E8E\\u6536\\u53D6\\u6709\\u4EBA\\u56DE\\u590D\\u60A8\\u7684\\u901A\\u77E5\\uFF0C\\u4E0D\\u4F1A\\u5728\\u524D\\u7AEF\\u6CC4\\u9732)\"\n        })), __jsx(_Form.Item, null, __jsx(_Form.Item, {\n          name: \"content\",\n          rules: [{\n            required: true,\n            message: '多说两句?'\n          }, {\n            min: 5,\n            message: '多说两句?'\n          }]\n        }, __jsx(_Input.TextArea, {\n          autoSize: {\n            minRows: 3\n          },\n          placeholder: \"\\u793C\\u8C8C\\u4EA4\\u6D41\\uFF0C\\u81F3\\u5C115\\u4E2A\\u5B57\\u7B26\"\n        })), __jsx(_Form.Item, {\n          name: \"recv\",\n          valuePropName: \"checked\",\n          noStyle: true\n        }, __jsx(_Checkbox, null, \"\\u6536\\u5230\\u56DE\\u590D\\u65F6\\u4F7F\\u7528\\u90AE\\u4EF6\\u901A\\u77E5\")), __jsx(_Form.Item, {\n          noStyle: true\n        }, __jsx(_Popover, {\n          title: \"\\u5E2E\\u52A9\",\n          content: __jsx(\"div\", null, __jsx(\"p\", null, \"\\u8BC4\\u8BBA\\u652F\\u6301Markdown\\uFF0C\\u5982\\u679C\\u6709\\u4EBA\\u56DE\\u590D\\u4F60\\u7684\\u8BC4\\u8BBA\\uFF0C\\u4F1A\\u6709\\u90AE\\u4EF6\\u63D0\\u9192\\u53D1\\u9001\\u5230\\u4F60\\u7684\\u90AE\\u7BB1\\uFF0C\\u5982\\u679C\\u4E0D\\u60F3\\u67E5\\u770B\\uFF0C\\u53EF\\u4EE5\\u53D6\\u6D88\"), __jsx(\"p\", null, \"\\u5934\\u50CF\\u5C06\\u4F18\\u5148\\u4F7F\\u7528\\u90AE\\u7BB1\\u5BF9\\u5E94Github\\u8D26\\u6237\\u5934\\u50CF,\\u5982\\u679C\\u83B7\\u53D6\\u5931\\u8D25\\u5C06\\u4F7F\\u7528\", __jsx(\"a\", {\n            href: \"https://cn.gravatar.com/\"\n          }, \"Gravatar\"), \"\\u5934\\u50CF\"), __jsx(\"p\", null, \"\\u90AE\\u7BB1\\u5730\\u5740\\u4E0D\\u4F1A\\u5728\\u524D\\u7AEF\\u6E32\\u67D3\\uFF0C\\u53EF\\u4EE5\\u907F\\u514D\\u88AB\\u626B\\u63CF\\u5DE5\\u5177\\u8BB0\\u5F55\\uFF0C\\u4F46\\u4ECD\\u53EF\\u80FD\\u901A\\u8FC7\\u5934\\u50CF\\u5730\\u5740\\u9006\\u63A8\\u51FA\\u90AE\\u7BB1\"), __jsx(\"p\", null, \"\\u8BC4\\u8BBA\\u5185\\u5BB9\\u8BF7\\u9075\\u5B88\\u76F8\\u5E94\\u6CD5\\u5F8B\\u6CD5\\u89C4\\uFF0C\\u5E76\\u4E14\\u8BF7\\u4E0D\\u8981\\u53D1\\u5E03\\u5E7F\\u544A\"))\n        }, __jsx(Icon, {\n          type: \"question-circle\"\n        }))), __jsx(_Form.Item, {\n          noStyle: true\n        }, __jsx(_Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          onClick: onSubmitClick,\n          loading: _this.state.editor_loading[id] === true,\n          style: {\n            \"float\": 'right'\n          }\n        }, \"\\u8BC4\\u8BBA\"))))\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"render_comment\", function (comment, depth, quote, parent) {\n      var onReplyClick = function onReplyClick() {\n        _this.onReplyClick(comment.id, true);\n      };\n\n      var onCloseClick = function onCloseClick() {\n        _this.onReplyClick(comment.id, false);\n      };\n\n      var jumpParent = function jumpParent() {\n        var target = document.getElementById(\"blotter-comment-\".concat(comment.id));\n\n        function getOffsetTop(e) {\n          return e.offsetParent ? e.offsetTop + getOffsetTop(e.offsetParent) : e.offsetTop;\n        }\n\n        var top = getOffsetTop(target);\n\n        if (!!target && top > 0) {\n          scrollTo(0, top + 10);\n        }\n      };\n\n      var childrenAndEditor = function childrenAndEditor() {\n        return __jsx(Fragment, null, _this.state.reply[comment.id] ? _this.render_editor(comment.id) : null, _this.render_comment_list(comment.children, depth + 1, comment));\n      };\n\n      var maxDepth = _this.context.big_screen ? 5 : 2;\n      return __jsx(\"div\", {\n        id: quote ? '' : \"blotter-comment-\".concat(comment.id)\n      }, __jsx(_Comment, {\n        style: quote ? {\n          borderLeft: '#ccc 5px solid',\n          paddingLeft: 10\n        } : {},\n        actions: quote ? [__jsx(\"span\", {\n          key: \"comment-nested-reply-to\",\n          onClick: jumpParent\n        }, \"\\u8DF3\\u8F6C\\u5230\\u8BE5\\u8BC4\\u8BBA\")] : [_this.state.reply[comment.id] ? __jsx(\"span\", {\n          key: \"comment-nested-reply-to\",\n          onClick: onCloseClick\n        }, \"\\u53D6\\u6D88\\u56DE\\u590D\", __jsx(Icon, {\n          type: \"close\"\n        })) : __jsx(\"span\", {\n          key: \"comment-nested-reply-to\",\n          onClick: onReplyClick\n        }, \"\\u56DE\\u590D\"), __jsx(\"span\", {\n          key: \"comment-nested-reply-to\"\n        }, comment.recv ? __jsx(_Popover, {\n          content: \"\\u5F53\\u4F60\\u56DE\\u590D\\u8BE5\\u8BC4\\u8BBA\\uFF0C\\u8BC4\\u8BBA\\u8005\\u4F1A\\u6536\\u5230\\u90AE\\u4EF6\\u63D0\\u9192\\uFF08\\u4F46\\u662F\\u4ED6/\\u5979\\u4E0D\\u4E00\\u5B9A\\u4F1A\\u770B\\u90AE\\u4EF6\\uFF09\"\n        }, __jsx(Icon, {\n          type: \"mail\"\n        })) : __jsx(_Popover, {\n          content: \"\\u5F53\\u4F60\\u56DE\\u590D\\u8BE5\\u8BC4\\u8BBA\\uFF0C\\u8BC4\\u8BBA\\u8005\\u4E0D\\u4F1A\\u6536\\u5230\\u90AE\\u4EF6\\u63D0\\u9192\\uFF08\\u6240\\u4EE5\\u4F60\\u53EF\\u80FD\\u65E0\\u6CD5\\u5F97\\u5230\\u53CD\\u9988\\uFF09\"\n        }, __jsx(Icon, {\n          type: \"disconnect\"\n        })))],\n        author: comment.email,\n        avatar: _this.render_avatar(comment.avatar),\n        content: comment.ad ? adWarning : comment.show ? __jsx(\"div\", null, !quote && depth != 1 && depth >= maxDepth ? _this.render_comment(parent, depth, true) : null, __jsx(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: comment.content\n          }\n        })) : delWarning,\n        datetime: __jsx(_Tooltip, {\n          title: moment(comment.time).format('YYYY-MM-DD HH:mm:ss')\n        }, __jsx(\"span\", null, moment(comment.time).fromNow()))\n      }, !quote && depth < maxDepth ? childrenAndEditor() : null), !quote && depth >= maxDepth ? childrenAndEditor() : null);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"render_comment_list\", function (comments, depth, parent) {\n      if (comments.length || depth == 1) {\n        return __jsx(_List, {\n          className: \"comment-list\",\n          header: depth == 1 ? \"\\u5171 \".concat(_this.state.total, \" \\u6761\\u8BC4\\u8BBA\") : null,\n          itemLayout: \"horizontal\",\n          dataSource: comments,\n          renderItem: function renderItem(comment, idx) {\n            return __jsx(_List.Item, {\n              key: comment.id\n            }, _this.render_comment(comment, depth, false, parent));\n          },\n          loading: _this.state.loading\n        });\n      } else {\n        return null;\n      }\n    });\n\n    _this.state = {\n      avatar: {},\n      reply: {},\n      editor_loading: {},\n      total: 0,\n      comments: [],\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(CommentPart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initialComment();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        id: \"blotter-comment\"\n      }, this.render_editor('000000000000'), this.render_comment_list(this.state.comments, 1));\n    }\n  }]);\n\n  return CommentPart;\n}(React.Component);\n\n_defineProperty(CommentPart, \"contextType\", Context);\n\nexport default CommentPart;","map":null,"metadata":{},"sourceType":"module"}