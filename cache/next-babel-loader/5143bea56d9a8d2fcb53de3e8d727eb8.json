{"ast":null,"code":"import \"antd/lib/card/style/css\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/table/style/css\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/row/style/css\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/col/style/css\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/icon/style/css\";\nimport _Icon from \"antd/lib/icon\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport Container from '@/components/container';\nimport TagPart from '@/components/tag';\nimport { adminPosts, postDelete } from '@/utils/api';\nimport { Context } from '@/utils/global';\nimport ShowNotification from '@/utils/notification';\n\nvar AdminPostList = /*#__PURE__*/function (_React$Component) {\n  _inherits(AdminPostList, _React$Component);\n\n  function AdminPostList(props) {\n    var _this;\n\n    _classCallCheck(this, AdminPostList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AdminPostList).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"getData\", function _callee(page, size, field, up) {\n      var r;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true\n              });\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(adminPosts(page, size, field, up));\n\n            case 3:\n              r = _context.sent;\n\n              _this.setState({\n                data: r.posts,\n                total: r.total,\n                loading: false\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"columns\", [{\n      title: '标题',\n      key: 'title',\n      dataIndex: 'title',\n      render: function render(text, record, index) {\n        return __jsx(Link, {\n          href: '/post/[url]',\n          as: \"/post/\".concat(record.url)\n        }, __jsx(\"a\", null, record.title));\n      },\n      width: '15%'\n    }, {\n      title: '链接',\n      key: 'url',\n      dataIndex: 'url',\n      width: '10%'\n    }, {\n      title: '发布时间',\n      key: 'publish_time',\n      dataIndex: 'publish_time',\n      sorter: true,\n      width: '10%'\n    }, {\n      title: '编辑时间',\n      key: 'edit_time',\n      dataIndex: 'edit_time',\n      sorter: true,\n      width: '10%'\n    }, {\n      title: '阅读量',\n      key: 'view',\n      dataIndex: 'view',\n      sorter: true,\n      width: '10%'\n    }, {\n      title: '已发布',\n      key: 'published',\n      dataIndex: 'published',\n      sorter: true,\n      width: '10%',\n      render: function render(text, record, index) {\n        return text ? __jsx(_Icon, {\n          type: \"eye\",\n          style: {\n            color: 'green'\n          }\n        }) : __jsx(_Icon, {\n          type: \"eye-invisible\",\n          style: {\n            color: 'red'\n          }\n        });\n      }\n    }, {\n      title: '标签',\n      key: 'tags',\n      dataIndex: 'tags',\n      width: '20%',\n      render: function render(text, record, index) {\n        return __jsx(\"div\", null, record.tags.map(function (tag) {\n          return __jsx(TagPart, {\n            key: tag[\"short\"],\n            tag: tag\n          });\n        }));\n      }\n    }, {\n      title: '操作',\n      key: 'op',\n      width: '15%',\n      render: function render(text, record, index) {\n        return __jsx(_Row, {\n          gutter: 5\n        }, __jsx(_Col, {\n          span: 12\n        }, __jsx(Link, {\n          href: \"/admin/post?url=\".concat(record.url)\n        }, __jsx(_Button, {\n          size: \"small\"\n        }, __jsx(_Icon, {\n          type: \"edit\"\n        }), \"\\u7F16\\u8F91\"))), __jsx(_Col, {\n          span: 12\n        }, __jsx(_Button, {\n          size: \"small\",\n          type: \"danger\",\n          onClick: function onClick() {\n            _this.onDelete(record.id);\n          }\n        }, __jsx(_Icon, {\n          type: \"delete\"\n        }), \"\\u5220\\u9664\")));\n      }\n    }]);\n\n    _defineProperty(_assertThisInitialized(_this), \"onDelete\", function _callee2(id) {\n      var r;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(postDelete(id));\n\n            case 2:\n              r = _context2.sent;\n              ShowNotification(r);\n\n              _this.setState(function (state) {\n                return {\n                  data: state.data.filter(function (post) {\n                    return post.id != id;\n                  })\n                };\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTableChange\", function (pagination, filters, sorter, extra) {\n      var current = pagination.current,\n          pageSize = pagination.pageSize;\n      var field = sorter.field,\n          order = sorter.order;\n\n      _this.setState({\n        page: current,\n        size: pageSize\n      });\n\n      var defaultSort = typeof order === 'undefined';\n\n      _this.getData(current, pageSize, defaultSort ? 'publish_time' : field, defaultSort ? false : order === 'ascend');\n    });\n\n    _this.state = {\n      loading: false,\n      pagination: {},\n      data: [],\n      total: 0,\n      size: 10,\n      page: 0\n    };\n\n    _this.getData(1, 10, 'publish_time', false);\n\n    return _this;\n  }\n\n  _createClass(AdminPostList, [{\n    key: \"render\",\n    value: function render() {\n      return __jsx(Container, {\n        lg: 20,\n        md: 20,\n        sm: 24,\n        xs: 24\n      }, __jsx(Context.Consumer, null, function (context) {\n        return __jsx(Head, null, __jsx(\"title\", null, \"\\u6587\\u7AE0\\u5217\\u8868|\\u540E\\u53F0|\".concat(context.blog_name)));\n      }), __jsx(_Card, null, __jsx(\"div\", {\n        style: {\n          textAlign: 'right'\n        }\n      }, __jsx(Link, {\n        href: \"/admin/post\"\n      }, __jsx(_Button, {\n        type: \"primary\"\n      }, __jsx(_Icon, {\n        type: \"plus\"\n      }), \"\\u65B0\\u5EFA\\u6587\\u7AE0\"))), __jsx(_Table, {\n        columns: this.columns,\n        dataSource: this.state.data,\n        loading: this.state.loading,\n        onChange: this.onTableChange,\n        pagination: {\n          current: this.state.page,\n          total: this.state.total,\n          pageSize: this.state.size,\n          showSizeChanger: true\n        }\n      })));\n    }\n  }]);\n\n  return AdminPostList;\n}(React.Component);\n\n_defineProperty(AdminPostList, \"defaultProps\", {});\n\nexport default AdminPostList;","map":null,"metadata":{},"sourceType":"module"}