{"ast":null,"code":"import \"antd/lib/card/style/css\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/row/style/css\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/switch/style/css\";\nimport _Switch from \"antd/lib/switch\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/date-picker/style/css\";\nimport _DatePicker from \"antd/lib/date-picker\";\nimport \"antd/lib/input-number/style/css\";\nimport _InputNumber from \"antd/lib/input-number\";\nimport \"antd/lib/col/style/css\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/divider/style/css\";\nimport _Divider from \"antd/lib/divider\";\nimport \"antd/lib/form/style/css\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/input/style/css\";\nimport _Input from \"antd/lib/input\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport Router, { withRouter } from 'next/router';\nimport { Icon } from '@ant-design/compatible';\nimport moment from 'moment';\nimport MediaQuery from 'react-responsive';\nimport Container from '@/components/container';\nimport TagSearch from '@/components/tag_search';\nimport { waitUntil } from '@/utils/debounce';\nimport { markdown, adminPost, postEdit } from '@/utils/api';\nimport { dimensionMaxMap } from '@/utils/responsive';\nimport styles from '@/pages/post/post.less';\nimport { Context } from '@/utils/global';\nimport ShowNotification from '@/utils/notification';\n\nclass PostEdit extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"formRef\", React.createRef());\n\n    _defineProperty(this, \"now\", moment(new Date()));\n\n    _defineProperty(this, \"getData\", async url => {\n      var r = await adminPost(url);\n      this.formRef.current.setFieldsValue({\n        id: r.id,\n        title: r.title,\n        url: r.url,\n        abstract: r.abstract,\n        head_image: r.head_image,\n        view: r.view,\n        publish_time: moment(new Date(r.publish_time)),\n        //   edit_time: moment(new Date(r.edit_time)),\n        published: r.published,\n        raw: r.raw\n      });\n      this.setState({\n        tags: r.tags,\n        html: r.content\n      });\n    });\n\n    _defineProperty(this, \"onBigScreen\", match => {\n      this.setState({\n        bigScreen: match\n      });\n    });\n\n    _defineProperty(this, \"renderMarkdown\", source => {\n      waitUntil('post_edit_sync', async () => {\n        this.setState({\n          loading: true\n        });\n        var r = await markdown(source);\n        this.setState({\n          html: r.html,\n          loading: false\n        });\n      }, 1000);\n    });\n\n    _defineProperty(this, \"onChange\", (current, pre) => {\n      if (this.state.preview) {\n        this.renderMarkdown(current);\n      }\n\n      return current;\n    });\n\n    _defineProperty(this, \"previewClick\", () => {\n      if (!this.state.preview) {\n        this.renderMarkdown(this.formRef.current.getFieldValue('raw'));\n      }\n\n      this.setState(state => ({\n        preview: !state.preview\n      }));\n    });\n\n    _defineProperty(this, \"tagOnAdd\", tag => {\n      this.setState(state => {\n        var tags = state.tags;\n        tags.push(tag);\n        return {\n          tags\n        };\n      });\n    });\n\n    _defineProperty(this, \"tagOnDelete\", tag => {\n      this.setState(state => {\n        var tags = state.tags.filter(_tag => _tag.short != tag.short);\n        return {\n          tags\n        };\n      });\n    });\n\n    _defineProperty(this, \"submit\", async () => {\n      this.setState({\n        submitDisabled: true\n      });\n      var obj = this.formRef.current.getFieldsValue(['id', 'title', 'url', 'abstract', 'head_image', 'view', 'publish_time', 'edit_time', 'published', 'raw']);\n      obj.tags = this.state.tags.map(tag => tag.id);\n      obj.publish_time = obj.publish_time.unix();\n      obj.edit_time = obj.edit_time.unix();\n      var r = await postEdit(obj);\n      ShowNotification(r);\n      this.setState({\n        submitDisabled: false\n      });\n      Router.push(`/admin/post?url=${obj.url}`);\n      this.getData(obj.url);\n    });\n\n    _defineProperty(this, \"renderEditor\", () => {\n      return __jsx(_Form.Item, {\n        name: \"raw\"\n      }, __jsx(_Input.TextArea, {\n        autoSize: {\n          minRows: 15\n        },\n        spellCheck: \"false\"\n      }));\n    });\n\n    _defineProperty(this, \"renderPreview\", () => {\n      return __jsx(\"div\", null, __jsx(Icon, {\n        type: this.state.loading ? 'loading' : 'check'\n      }), __jsx(\"article\", {\n        className: styles.post\n      }, this.state.headImage ? __jsx(\"img\", {\n        src: this.state.headImage\n      }) : null, __jsx(_Divider, null), __jsx(\"section\", {\n        className: \"post-content\",\n        dangerouslySetInnerHTML: {\n          __html: this.state.html\n        }\n      })));\n    });\n\n    _defineProperty(this, \"renderToolbar\", () => {\n      var md = this.state.bigScreen && this.state.preview;\n      return __jsx(_Row, {\n        gutter: 15\n      }, __jsx(_Col, {\n        lg: 24\n      }, __jsx(_Form.Item, {\n        name: \"id\"\n      }, __jsx(_Input, {\n        disabled: true,\n        placeholder: \"\\u6587\\u7AE0ID\",\n        addonBefore: \"ID\"\n      }))), __jsx(_Col, {\n        lg: md ? 12 : 6,\n        md: 12\n      }, __jsx(_Form.Item, {\n        name: \"url\",\n        rules: [{\n          required: true,\n          message: '文章必须有链接',\n          whitespace: true\n        }]\n      }, __jsx(_Input, {\n        placeholder: \"\\u6587\\u7AE0\\u94FE\\u63A5\",\n        addonBefore: \"/post/\"\n      }))), __jsx(_Col, {\n        lg: md ? 12 : 6,\n        md: 12\n      }, __jsx(_Form.Item, {\n        name: \"view\"\n      }, __jsx(_InputNumber, {\n        placeholder: \"\\u9605\\u8BFB\\u91CF\",\n        min: 0\n      }))), __jsx(_Col, {\n        lg: md ? 12 : 6,\n        md: 12\n      }, __jsx(_Form.Item, {\n        name: \"publish_time\"\n      }, __jsx(_DatePicker, {\n        showTime: true,\n        placeholder: \"\\u53D1\\u5E03\\u65F6\\u95F4\"\n      }))), __jsx(_Col, {\n        lg: md ? 12 : 6,\n        md: 12\n      }, __jsx(_Form.Item, {\n        name: \"edit_time\"\n      }, __jsx(_DatePicker, {\n        showTime: true,\n        placeholder: \"\\u7F16\\u8F91\\u65F6\\u95F4\"\n      }))), __jsx(_Col, {\n        lg: md ? 12 : 10,\n        md: 12\n      }, __jsx(_Form.Item, {\n        name: \"title\"\n      }, __jsx(_Input, {\n        placeholder: \"\\u6587\\u7AE0\\u6807\\u9898\"\n      }))), __jsx(_Col, {\n        lg: md ? 12 : 8,\n        md: 12\n      }, __jsx(_Form.Item, {\n        name: \"head_image\"\n      }, __jsx(_Input, {\n        placeholder: \"\\u5934\\u56FE\",\n        onChange: e => {\n          this.setState({\n            headImage: e.currentTarget.value\n          });\n        }\n      }))), __jsx(_Col, {\n        lg: md ? 12 : 2,\n        md: 12\n      }, __jsx(_Form.Item, null, __jsx(_Button, {\n        onClick: this.previewClick\n      }, __jsx(Icon, {\n        type: this.state.preview ? 'eye-invisible' : 'eye'\n      })))), __jsx(_Col, {\n        lg: md ? 12 : 2,\n        md: 12\n      }, __jsx(_Form.Item, {\n        name: \"published\",\n        valuePropName: \"checked\"\n      }, __jsx(_Switch, {\n        checkedChildren: \"\\u53D1\\u5E03\",\n        unCheckedChildren: \"\\u8349\\u7A3F\"\n      }))), __jsx(_Col, {\n        lg: md ? 12 : 2,\n        md: 12\n      }, __jsx(_Form.Item, null, __jsx(_Button, {\n        loading: this.state.submitDisabled,\n        onClick: this.submit,\n        type: \"primary\"\n      }, \"\\u63D0\\u4EA4\"))), __jsx(_Col, {\n        lg: 24\n      }, __jsx(_Form.Item, null, __jsx(TagSearch, {\n        onAdd: this.tagOnAdd,\n        onDelete: this.tagOnDelete,\n        tags: this.state.tags\n      }))), __jsx(_Col, {\n        lg: 24\n      }, __jsx(_Form.Item, {\n        name: \"abstract\"\n      }, __jsx(_Input.TextArea, {\n        autoSize: {\n          minRows: 5\n        },\n        spellCheck: \"false\",\n        placeholder: \"\\u6587\\u7AE0\\u6458\\u8981\"\n      }))));\n    });\n\n    this.state = {\n      raw: '',\n      html: '',\n      preview: false,\n      bigScreen: true,\n      loading: false,\n      tags: [],\n      headImage: '',\n      submitDisabled: false\n    };\n  }\n\n  componentDidMount() {\n    var url = this.props.router.query.url;\n\n    if (url != '' && typeof url != 'undefined') {\n      this.getData(url);\n    }\n  }\n\n  render() {\n    return __jsx(Container, {\n      xxl: 20,\n      xl: 20,\n      lg: 20,\n      md: 24,\n      sm: 24,\n      xs: 24\n    }, __jsx(Context.Consumer, null, context => __jsx(Head, null, __jsx(\"title\", null, `文章编辑|后台|${context.blog_name}`))), __jsx(MediaQuery, {\n      minDeviceWidth: dimensionMaxMap.lg,\n      onChange: this.onBigScreen\n    }, null), __jsx(_Row, {\n      gutter: 5\n    }, __jsx(_Col, {\n      span: this.state.bigScreen && this.state.preview ? 12 : 24\n    }, __jsx(_Card, null, __jsx(_Form, {\n      ref: this.formRef,\n      initialValues: {\n        id: '',\n        title: '',\n        url: '',\n        abstract: '',\n        head_image: '',\n        view: 0,\n        publish_time: this.now,\n        edit_time: this.now,\n        published: false,\n        raw: ''\n      }\n    }, this.renderToolbar(), this.state.preview && !this.state.bigScreen ? this.renderPreview() : this.renderEditor()))), this.state.bigScreen && this.state.preview ? __jsx(_Col, {\n      span: 12\n    }, __jsx(_Card, null, this.renderPreview())) : null));\n  }\n\n}\n\n_defineProperty(PostEdit, \"defaultProps\", {});\n\nexport default withRouter(PostEdit);","map":null,"metadata":{},"sourceType":"module"}