{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { request } from '@/utils/request';\nexport var getAll = function getAll(all, page, size, callback) {\n  return _regeneratorRuntime.async(function getAll$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(request('get', \"/api/extensions/queue/get_all\", {\n            all: all,\n            offset: (page - 1) * size,\n            number: size\n          }, callback));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var get = function get(id, callback) {\n  return _regeneratorRuntime.async(function get$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(request('get', \"/api/extensions/queue/get\", {\n            id: id\n          }, callback));\n\n        case 2:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var create = function create(max, password, description, callback) {\n  return _regeneratorRuntime.async(function create$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(request('get', \"/api/extensions/queue/create\", {\n            max: max,\n            password: password,\n            description: description\n          }, callback));\n\n        case 2:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var update = function update(id, max, password, description, callback) {\n  return _regeneratorRuntime.async(function update$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(request('get', \"/api/extensions/queue/update\", {\n            id: id,\n            max: max,\n            password: password,\n            description: description\n          }, callback));\n\n        case 2:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var finish = function finish(id, callback) {\n  return _regeneratorRuntime.async(function finish$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(request('get', \"/api/extensions/queue/finish\", {\n            id: id\n          }, callback));\n\n        case 2:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var insert = function insert(id, callback) {\n  return _regeneratorRuntime.async(function insert$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return _regeneratorRuntime.awrap(request('get', \"/api/extensions/queue/insert\", {\n            id: id\n          }, callback));\n\n        case 2:\n          return _context6.abrupt(\"return\", _context6.sent);\n\n        case 3:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var land = function land(queue_id, member_id, callback) {\n  return _regeneratorRuntime.async(function land$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return _regeneratorRuntime.awrap(request('get', \"/api/extensions/queue/land\", {\n            queue_id: queue_id,\n            member_id: member_id\n          }, callback));\n\n        case 2:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 3:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var out = function out(queue_id, member_id, callback) {\n  return _regeneratorRuntime.async(function out$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return _regeneratorRuntime.awrap(request('get', \"/api/extensions/queue/out\", {\n            queue_id: queue_id,\n            member_id: member_id\n          }, callback));\n\n        case 2:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 3:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":null,"metadata":{},"sourceType":"module"}