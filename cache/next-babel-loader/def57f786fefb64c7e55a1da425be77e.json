{"ast":null,"code":"import \"antd/lib/card/style/css\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/anchor/style/css\";\nimport _Anchor from \"antd/lib/anchor\";\nimport \"antd/lib/page-header/style/css\";\nimport _PageHeader from \"antd/lib/page-header\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/icon/style/css\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/skeleton/style/css\";\nimport _Skeleton from \"antd/lib/skeleton\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { withRouter } from 'next/router';\nimport TagPart from '@/components/tag';\nimport Visiable from '@/components/visiable';\nimport CommentPart from '@/components/comment';\nimport Container from '@/components/container';\nimport { post } from '@/utils/api';\nimport { Context } from '@/utils/global';\nimport styles from './post.less';\n\nclass PostPage extends React.Component {\n  static async getInitialProps(args) {\n    var r = await post(args.query.url);\n    var anchors = PostPage.findAnchor(r.content);\n    return {\n      post: r,\n      anchors: anchors\n    };\n  }\n\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"render_post\", () => {\n      return this.props.post === undefined ? __jsx(_Skeleton, {\n        active: true\n      }) : __jsx(\"article\", {\n        className: styles.post\n      }, __jsx(_PageHeader, {\n        className: \"shadow\",\n        title: this.props.post.title\n      }, __jsx(\"div\", null, __jsx(\"div\", {\n        className: \"right20\"\n      }, __jsx(_Icon, {\n        type: \"eye\",\n        className: \"right5\"\n      }), this.props.post.view), __jsx(\"div\", {\n        className: \"right20\"\n      }, __jsx(_Icon, {\n        type: \"calendar\",\n        className: \"right5\"\n      }), this.props.post.publish_time), this.props.post.publish_time == this.props.post.edit_time ? null : __jsx(\"div\", {\n        className: \"right20\"\n      }, __jsx(_Icon, {\n        type: \"edit\",\n        className: \"right5\"\n      }), this.props.post.edit_time), __jsx(Context.Consumer, null, context => context.token !== '' ? __jsx(Link, {\n        href: `/admin/post?url=${this.props.router.query.url}`\n      }, __jsx(_Button, {\n        type: \"primary\",\n        size: \"small\"\n      }, \"\\u7F16\\u8F91\")) : null), __jsx(\"blockquote\", null, this.props.post.abstract), __jsx(\"div\", null, __jsx(_Icon, {\n        type: \"tag\",\n        className: \"right20\"\n      }), this.props.post.tags.map(tag => __jsx(TagPart, {\n        key: tag.short,\n        tag: tag\n      }))))), __jsx(\"section\", {\n        className: \"post-content\",\n        dangerouslySetInnerHTML: {\n          __html: this.props.post.content\n        }\n      }));\n    });\n\n    _defineProperty(this, \"render_anchor\", anchor => {\n      return __jsx(_Anchor.Link, {\n        key: `${anchor.id}|${anchor.name}`,\n        href: anchor.id,\n        title: anchor.name\n      }, anchor.children.map(this.render_anchor));\n    });\n\n    this.state = {};\n  }\n\n  static findAnchor(text) {\n    var re = new RegExp(`<h([1-6]) id=\"(.*)\">(.*)</h\\\\1>`, 'g');\n    var result_list = [];\n\n    do {\n      var result = re.exec(text);\n\n      if (result !== null) {\n        result_list.push({\n          id: `#${result[2]}`,\n          name: result[3],\n          level: parseInt(result[1]),\n          children: []\n        });\n      }\n    } while (result);\n\n    var anchors = [];\n\n    var insert = (lst, value) => {\n      if (lst.length > 0 && lst[lst.length - 1].level < value.level) {\n        insert(lst[lst.length - 1].children, value);\n      } else {\n        lst.push(value);\n      }\n    };\n\n    result_list.map(anchor => {\n      insert(anchors, anchor);\n    });\n    anchors.push({\n      id: '#blotter-comment',\n      name: '评论区',\n      level: 1,\n      children: []\n    });\n    return anchors;\n  }\n\n  render() {\n    return typeof this.props.post === 'undefined' ? null : __jsx(Container, {\n      lg: 16\n    }, __jsx(Context.Consumer, null, context => __jsx(Head, null, __jsx(\"title\", null, `${this.props.post.title}|${context.blog_name}`))), __jsx(_Card, null, this.render_post()), __jsx(_Card, null, __jsx(CommentPart, {\n      url: `/post/${this.props.router.query.url}`\n    })), __jsx(Visiable, {\n      visiable_bigger: \"xl\"\n    }, __jsx(_Anchor, {\n      offsetTop: 10,\n      style: {\n        maxHeight: 'calc(100% - 100px)',\n        background: 'transparent',\n        position: 'fixed',\n        top: '50px',\n        right: '30px'\n      }\n    }, this.props.anchors.map(this.render_anchor))));\n  }\n\n}\n\n_defineProperty(PostPage, \"defaultProps\", {\n  anchors: []\n});\n\nexport default withRouter(PostPage);","map":null,"metadata":{},"sourceType":"module"}