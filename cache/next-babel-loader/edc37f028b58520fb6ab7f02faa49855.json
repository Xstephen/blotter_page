{"ast":null,"code":"import \"antd/lib/card/style/css\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/table/style/css\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/checkbox/style/css\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport \"antd/lib/col/style/css\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/row/style/css\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/input/style/css\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/popconfirm/style/css\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/typography/style/css\";\nimport _Typography from \"antd/lib/typography\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Fragment } from 'react';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { Icon } from '@ant-design/compatible';\nimport Container from '@/components/container';\nimport TagPart from '@/components/tag';\nimport { adminPosts, postDelete } from '@/utils/api';\nimport { Context } from '@/utils/global';\nimport ShowNotification from '@/utils/notification';\nimport { waitUntil } from '@/utils/debounce';\nimport TagSearch from '@/components/tag_search';\nconst defaultSort = 'publish_time';\nconst defaultUp = false;\n\nclass AdminPostList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onChange\", e => {\n      var value = e.target.value;\n      waitUntil('index_search', () => {\n        this.setState({\n          search: value,\n          page: 1,\n          size: 10\n        }, this.getData);\n      }, 1000);\n    });\n\n    _defineProperty(this, \"getData\", async () => {\n      this.setState({\n        loading: true\n      });\n      var r = await adminPosts(this.state.search, this.state.search_fields, this.state.page, this.state.size, this.state.field, this.state.up, this.state.with_tags, this.state.without_tags);\n      this.setState({\n        total: r.total,\n        data: r.posts,\n        loading: false\n      });\n    });\n\n    _defineProperty(this, \"columns\", [{\n      title: '标题',\n      key: 'title',\n      dataIndex: 'title',\n      width: 150,\n      ellipsis: true,\n      render: (text, record, index) => __jsx(\"div\", {\n        style: {\n          width: 150 - 16 * 2\n        },\n        title: text\n      }, __jsx(_Typography.Text, {\n        style: {\n          width: '100%'\n        },\n        ellipsis: true\n      }, __jsx(Link, {\n        href: '/post/[url]',\n        as: `/post/${record.url}`\n      }, __jsx(\"a\", null, record.title))))\n    }, {\n      title: '链接',\n      key: 'url',\n      dataIndex: 'url',\n      width: 150,\n      ellipsis: true,\n      render: text => __jsx(\"div\", {\n        style: {\n          width: 150 - 16 * 2\n        },\n        title: text\n      }, __jsx(_Typography.Text, {\n        style: {\n          width: '100%'\n        },\n        ellipsis: true\n      }, text))\n    }, {\n      title: '发布时间',\n      key: 'publish_time',\n      dataIndex: 'publish_time',\n      sorter: true,\n      width: 150,\n      ellipsis: true\n    }, {\n      title: '编辑时间',\n      key: 'edit_time',\n      dataIndex: 'edit_time',\n      sorter: true,\n      width: 150,\n      ellipsis: true\n    }, {\n      title: '阅读量',\n      key: 'view',\n      dataIndex: 'view',\n      sorter: true,\n      width: 100,\n      ellipsis: true\n    }, {\n      title: '已发布',\n      key: 'published',\n      dataIndex: 'published',\n      sorter: true,\n      width: 100,\n      ellipsis: true,\n      render: (text, record, index) => text ? __jsx(Icon, {\n        type: \"eye\",\n        style: {\n          color: 'green'\n        }\n      }) : __jsx(Icon, {\n        type: \"eye-invisible\",\n        style: {\n          color: 'red'\n        }\n      })\n    }, {\n      title: '标签',\n      key: 'tags',\n      dataIndex: 'tags',\n      width: 200,\n      ellipsis: true,\n      render: (text, record, index) => __jsx(\"div\", {\n        style: {\n          width: 200 - 16 * 2,\n          whiteSpace: 'normal'\n        }\n      }, record.tags.map(tag => __jsx(TagPart, {\n        key: tag.short,\n        tag: tag\n      })))\n    }, {\n      title: '操作',\n      key: 'op',\n      render: (text, record, index) => __jsx(\"div\", {\n        style: {\n          whiteSpace: 'nowrap'\n        }\n      }, __jsx(Link, {\n        href: `/admin/post?url=${record.url}`\n      }, __jsx(\"a\", null, __jsx(_Button, {\n        size: \"small\"\n      }, __jsx(Icon, {\n        type: \"edit\"\n      }), \"\\u7F16\\u8F91\"))), ' ', __jsx(_Popconfirm, {\n        title: \"\\u771F\\u7684\\u8981\\u5220\\u9664\\u4E48\\uFF1F\",\n        onConfirm: () => {\n          this.onDelete(record.id);\n        },\n        okText: \"\\u5220\\u9664\\uFF01\",\n        cancelText: \"\\u7B97\\u4E86\"\n      }, __jsx(_Button, {\n        size: \"small\",\n        danger: true\n      }, __jsx(Icon, {\n        type: \"delete\"\n      }), \"\\u5220\\u9664\")))\n    }]);\n\n    _defineProperty(this, \"onDelete\", async id => {\n      var r = await postDelete(id);\n      ShowNotification(r);\n      this.setState(state => ({\n        data: state.data.filter(post => post.id != id)\n      }));\n    });\n\n    _defineProperty(this, \"onTableChange\", (pagination, filters, sorter, extra) => {\n      const {\n        current,\n        pageSize\n      } = pagination;\n      const {\n        field,\n        order\n      } = sorter;\n      var s = {};\n      if (!!current) s.page = current;\n      if (!!pageSize) s.size = pageSize;\n\n      if (typeof order !== 'undefined') {\n        s.field = field;\n        s.up = order === 'ascend';\n      }\n\n      this.setState(s, this.getData);\n    });\n\n    _defineProperty(this, \"renderTagSearch\", name => {\n      return __jsx(TagSearch, {\n        tags: this.state[name],\n        onAdd: tag => {\n          this.setState(state => {\n            var tags = state[name];\n            tags.filter(item => item.id !== tag.id);\n            tags.push(tag);\n            var ret = {\n              page: 1\n            };\n            ret[name] = tags;\n            return ret;\n          }, this.getData);\n        },\n        onDelete: tag => {\n          this.setState(state => {\n            var tags = state[name];\n            tags.filter(item => item.id !== tag.id);\n            var ret = {\n              page: 1\n            };\n            ret[name] = tags;\n            return ret;\n          }, this.getData);\n        }\n      });\n    });\n\n    _defineProperty(this, \"renderSearch\", () => {\n      const checkboxs = [{\n        key: 'title',\n        name: '标题'\n      }, {\n        key: 'abstract',\n        name: '摘要'\n      }, {\n        key: 'raw',\n        name: '内容'\n      }];\n      return __jsx(Fragment, null, __jsx(_Row, null, __jsx(_Input, {\n        placeholder: \"\\u641C\\u7D22\\u6587\\u7AE0\",\n        onChange: this.onChange,\n        allowClear: true,\n        prefix: __jsx(Icon, {\n          type: \"search\"\n        }),\n        size: \"large\"\n      })), __jsx(_Row, {\n        gutter: 10\n      }, __jsx(_Col, null, \"\\u641C\\u7D22\\u8303\\u56F4\\uFF1A\"), checkboxs.map(item => __jsx(_Col, {\n        key: item.key\n      }, __jsx(_Checkbox, {\n        checked: this.state.search_fields.indexOf(item.key) !== -1,\n        onChange: e => {\n          const checked = e.target.checked;\n          console.log(item, checked, this.state.search_fields);\n          this.setState(state => {\n            var {\n              search_fields\n            } = state;\n            search_fields = search_fields.filter(it => it != item.key);\n\n            if (checked) {\n              search_fields.push(item.key);\n            }\n\n            return {\n              search_fields\n            };\n          }, this.getData);\n        }\n      }, item.name)))), __jsx(_Row, {\n        gutter: 10\n      }, __jsx(_Col, null, \"\\u4ECE\\u8FD9\\u4E9B\\u6807\\u7B7E\\u91CC\\u641C\\u7D22\\uFF1A\"), __jsx(_Col, null, this.renderTagSearch('with_tags'))), __jsx(_Row, {\n        gutter: 10\n      }, __jsx(_Col, null, \"\\u4ECE\\u8FD9\\u4E9B\\u6807\\u7B7E\\u91CC\\u6392\\u9664\\uFF1A\"), __jsx(_Col, null, this.renderTagSearch('without_tags'))));\n    });\n\n    this.state = {\n      search: '',\n      search_fields: ['title'],\n      loading: false,\n      pagination: {},\n      data: [],\n      total: 0,\n      size: 10,\n      page: 1,\n      with_tags: [],\n      without_tags: [],\n      field: defaultSort,\n      up: defaultUp\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    return __jsx(Container, {\n      lg: 20,\n      md: 20,\n      sm: 24,\n      xs: 24\n    }, __jsx(Context.Consumer, null, context => __jsx(Head, null, __jsx(\"title\", null, `文章列表|后台|${context.blog_name}`))), __jsx(_Card, null, this.renderSearch(), __jsx(_Table, {\n      rowKey: record => record.id,\n      columns: this.columns,\n      scroll: {\n        x: true\n      },\n      dataSource: this.state.data,\n      loading: this.state.loading,\n      onChange: (a, b, c, d) => this.onTableChange(a, b, Array.isArray(c) ? c[0] : c, d),\n      title: () => __jsx(\"div\", {\n        style: {\n          textAlign: 'right'\n        }\n      }, __jsx(Link, {\n        href: \"/admin/post\"\n      }, __jsx(\"a\", null, __jsx(_Button, {\n        type: \"primary\"\n      }, __jsx(Icon, {\n        type: \"plus\"\n      }), \"\\u65B0\\u5EFA\\u6587\\u7AE0\")))),\n      pagination: {\n        current: this.state.page,\n        total: this.state.total,\n        pageSize: this.state.size,\n        showSizeChanger: true\n      }\n    })));\n  }\n\n}\n\n_defineProperty(AdminPostList, \"defaultProps\", {});\n\nexport default AdminPostList;","map":null,"metadata":{},"sourceType":"module"}