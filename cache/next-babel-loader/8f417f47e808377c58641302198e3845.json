{"ast":null,"code":"import \"antd/lib/card/style/css\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/list/style/css\";\nimport _List from \"antd/lib/list\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/comment/style/css\";\nimport _Comment from \"antd/lib/comment\";\nimport \"antd/lib/tooltip/style/css\";\nimport _Tooltip from \"antd/lib/tooltip\";\nimport \"antd/lib/avatar/style/css\";\nimport _Avatar from \"antd/lib/avatar\";\nimport \"antd/lib/checkbox/style/css\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport Container from '@/components/container';\nimport { Context } from '@/utils/global';\nimport { commentsAdmin, commentSet } from '@/utils/api';\nimport moment from 'moment';\nimport ShowNotification from '@/utils/notification';\nvar defaultAvatar = 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png';\n\nvar AdminComments = /*#__PURE__*/function (_React$Component) {\n  _inherits(AdminComments, _React$Component);\n\n  var _super = _createSuper(AdminComments);\n\n  function AdminComments(props) {\n    var _this;\n\n    _classCallCheck(this, AdminComments);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"getData\", function _callee() {\n      var r;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true\n              });\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(commentsAdmin(_this.state.page, _this.state.size));\n\n            case 3:\n              r = _context.sent;\n\n              _this.setState({\n                data: r.comments,\n                total: r.total,\n                loading: false\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (page, size) {\n      if (typeof size === 'undefined') size = _this.state.size;\n\n      _this.setState({\n        page: page,\n        size: size\n      }, _this.getData);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"checkboxChange\", function (e, id, key) {\n      var checked = e.target.checked;\n\n      _this.setState(function (state) {\n        var data = state.data;\n        data.map(function (item) {\n          if (item.id === id) {\n            item[key] = checked;\n          }\n\n          return item;\n        });\n        return {\n          data: data\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderComment\", function (comment, notReply) {\n      var items = [{\n        key: 'show',\n        value: '显示'\n      }, {\n        key: 'ad',\n        value: '广告'\n      }, {\n        key: 'recv',\n        value: '接收提醒'\n      }];\n      return __jsx(_Comment, {\n        style: notReply ? {} : {\n          borderLeft: '#ccc 5px solid',\n          paddingLeft: 10\n        },\n        actions: notReply ? items.map(function (item) {\n          return __jsx(_Checkbox, {\n            key: item.key,\n            checked: comment[item.key],\n            onChange: function onChange(e) {\n              return _this.checkboxChange(e, comment.id, item.key);\n            }\n          }, item.value);\n        }) : [],\n        author: comment.email,\n        avatar: __jsx(_Avatar, {\n          src: comment.avatar ? comment.avatar : defaultAvatar\n        }),\n        datetime: __jsx(_Tooltip, {\n          title: moment(comment.time).format('YYYY-MM-DD HH:mm:ss')\n        }, __jsx(\"span\", null, moment(comment.time).fromNow())),\n        content: __jsx(\"div\", null, notReply && comment.reply_comment.id !== '000000000000000000000000' ? _this.renderComment(comment.reply_comment, false) : null, __jsx(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: comment.content\n          }\n        }))\n      });\n    });\n\n    _this.state = {\n      loading: false,\n      total: 0,\n      data: [],\n      page: 1,\n      size: 10\n    };\n    return _this;\n  }\n\n  _createClass(AdminComments, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var pagination = {\n        showSizeChanger: true,\n        current: this.state.page,\n        pageSize: this.state.size,\n        total: this.state.total,\n        onChange: this.onChange,\n        onShowSizeChange: this.onChange\n      };\n      return __jsx(Container, {\n        lg: 20,\n        md: 20,\n        sm: 24,\n        xs: 24\n      }, __jsx(Context.Consumer, null, function (context) {\n        return __jsx(Head, null, __jsx(\"title\", null, \"\\u8BC4\\u8BBA\\u5217\\u8868|\\u540E\\u53F0|\".concat(context.blog_name)));\n      }), __jsx(_Card, null, __jsx(_List, {\n        className: \"comment-list\",\n        header: \"\\u5171 \".concat(this.state.total, \" \\u6761\\u8BC4\\u8BBA\"),\n        itemLayout: \"horizontal\",\n        loading: this.state.loading,\n        dataSource: this.state.data,\n        renderItem: function renderItem(comment, idx) {\n          return __jsx(_List.Item, {\n            key: comment.id\n          }, _this2.renderComment(comment, true), __jsx(\"div\", {\n            style: {\n              textAlign: 'right'\n            }\n          }, __jsx(\"p\", null, __jsx(\"a\", {\n            href: comment.url,\n            target: \"_blank\"\n          }, \"\\u300A\", comment.title !== '' ? comment.title : '评论区', \"\\u300B\")), __jsx(\"p\", null, __jsx(_Button, {\n            onClick: function _callee2(e) {\n              var r;\n              return _regeneratorRuntime.async(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _context2.next = 2;\n                      return _regeneratorRuntime.awrap(commentSet(comment.id, comment.ad, comment.recv, comment.show));\n\n                    case 2:\n                      r = _context2.sent;\n                      ShowNotification(r);\n\n                    case 4:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            }\n          }, \"\\u4FDD\\u5B58\"))));\n        },\n        pagination: pagination\n      })));\n    }\n  }]);\n\n  return AdminComments;\n}(React.Component);\n\n_defineProperty(AdminComments, \"defaultProps\", {});\n\nexport default AdminComments;","map":null,"metadata":{},"sourceType":"module"}