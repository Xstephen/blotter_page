{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport initialWASM from '@/utils/wasm';\n\nfunction initialCrypto(_x) {\n  return _initialCrypto.apply(this, arguments);\n}\n\nfunction _initialCrypto() {\n  _initialCrypto = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(callback) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return initialWASM('/static/crypto.wasm', 'ohyee_crypto', callback);\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _initialCrypto.apply(this, arguments);\n}\n\nexport default initialCrypto;","map":null,"metadata":{},"sourceType":"module"}