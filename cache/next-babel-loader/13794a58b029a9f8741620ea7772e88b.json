{"ast":null,"code":"import \"antd/lib/card/style/css\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/table/style/css\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/col/style/css\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/row/style/css\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/input/style/css\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/popconfirm/style/css\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/typography/style/css\";\nimport _Typography from \"antd/lib/typography\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Fragment } from 'react';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { Icon } from '@ant-design/compatible';\nimport Container from '@/components/container';\nimport TagPart from '@/components/tag';\nimport { adminPosts, postDelete } from '@/utils/api';\nimport { Context } from '@/utils/global';\nimport ShowNotification from '@/utils/notification';\nimport { waitUntil } from '@/utils/debounce';\nimport TagSearch from '@/components/tag_search';\nvar defaultSort = 'publish_time';\nvar defaultUp = false;\n\nvar AdminPostList = /*#__PURE__*/function (_React$Component) {\n  _inherits(AdminPostList, _React$Component);\n\n  function AdminPostList(props) {\n    var _this;\n\n    _classCallCheck(this, AdminPostList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AdminPostList).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (e) {\n      var value = e.target.value;\n      waitUntil('index_search', function () {\n        _this.setState({\n          search: value,\n          page: 1,\n          size: 10\n        }, _this.getData);\n      }, 1000);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getData\", function _callee() {\n      var r;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                loading: true\n              });\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(adminPosts(_this.state.search, _this.state.page, _this.state.size, _this.state.field, _this.state.up, _this.state.with_tags, _this.state.without_tags));\n\n            case 3:\n              r = _context.sent;\n\n              _this.setState({\n                total: r.total,\n                data: r.posts,\n                loading: false\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, _Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"columns\", [{\n      title: '标题',\n      key: 'title',\n      dataIndex: 'title',\n      width: 150,\n      ellipsis: true,\n      render: function render(text, record, index) {\n        return __jsx(\"div\", {\n          style: {\n            width: 150 - 16 * 2\n          },\n          title: text\n        }, __jsx(_Typography.Text, {\n          style: {\n            width: '100%'\n          },\n          ellipsis: true\n        }, __jsx(Link, {\n          href: '/post/[url]',\n          as: \"/post/\".concat(record.url)\n        }, __jsx(\"a\", null, record.title))));\n      }\n    }, {\n      title: '链接',\n      key: 'url',\n      dataIndex: 'url',\n      width: 150,\n      ellipsis: true,\n      render: function render(text) {\n        return __jsx(\"div\", {\n          style: {\n            width: 150 - 16 * 2\n          },\n          title: text\n        }, __jsx(_Typography.Text, {\n          style: {\n            width: '100%'\n          },\n          ellipsis: true\n        }, text));\n      }\n    }, {\n      title: '发布时间',\n      key: 'publish_time',\n      dataIndex: 'publish_time',\n      sorter: true,\n      width: 150,\n      ellipsis: true\n    }, {\n      title: '编辑时间',\n      key: 'edit_time',\n      dataIndex: 'edit_time',\n      sorter: true,\n      width: 150,\n      ellipsis: true\n    }, {\n      title: '阅读量',\n      key: 'view',\n      dataIndex: 'view',\n      sorter: true,\n      width: 100,\n      ellipsis: true\n    }, {\n      title: '已发布',\n      key: 'published',\n      dataIndex: 'published',\n      sorter: true,\n      width: 100,\n      ellipsis: true,\n      render: function render(text, record, index) {\n        return text ? __jsx(Icon, {\n          type: \"eye\",\n          style: {\n            color: 'green'\n          }\n        }) : __jsx(Icon, {\n          type: \"eye-invisible\",\n          style: {\n            color: 'red'\n          }\n        });\n      }\n    }, {\n      title: '标签',\n      key: 'tags',\n      dataIndex: 'tags',\n      width: 200,\n      ellipsis: true,\n      render: function render(text, record, index) {\n        return __jsx(\"div\", {\n          style: {\n            width: 200 - 16 * 2,\n            whiteSpace: 'normal'\n          }\n        }, record.tags.map(function (tag) {\n          return __jsx(TagPart, {\n            key: tag[\"short\"],\n            tag: tag\n          });\n        }));\n      }\n    }, {\n      title: '操作',\n      key: 'op',\n      render: function render(text, record, index) {\n        return __jsx(\"div\", {\n          style: {\n            whiteSpace: 'nowrap'\n          }\n        }, __jsx(Link, {\n          href: \"/admin/post?url=\".concat(record.url)\n        }, __jsx(\"a\", null, __jsx(_Button, {\n          size: \"small\"\n        }, __jsx(Icon, {\n          type: \"edit\"\n        }), \"\\u7F16\\u8F91\"))), ' ', __jsx(_Popconfirm, {\n          title: \"\\u771F\\u7684\\u8981\\u5220\\u9664\\u4E48\\uFF1F\",\n          onConfirm: function onConfirm() {\n            _this.onDelete(record.id);\n          },\n          okText: \"\\u5220\\u9664\\uFF01\",\n          cancelText: \"\\u7B97\\u4E86\"\n        }, __jsx(_Button, {\n          size: \"small\",\n          type: \"danger\"\n        }, __jsx(Icon, {\n          type: \"delete\"\n        }), \"\\u5220\\u9664\")));\n      }\n    }]);\n\n    _defineProperty(_assertThisInitialized(_this), \"onDelete\", function _callee2(id) {\n      var r;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(postDelete(id));\n\n            case 2:\n              r = _context2.sent;\n              ShowNotification(r);\n\n              _this.setState(function (state) {\n                return {\n                  data: state.data.filter(function (post) {\n                    return post.id != id;\n                  })\n                };\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, _Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTableChange\", function (pagination, filters, sorter, extra) {\n      var current = pagination.current,\n          pageSize = pagination.pageSize;\n      var field = sorter.field,\n          order = sorter.order;\n      var s = {};\n      if (!!current) s.page = current;\n      if (!!pageSize) s.size = pageSize;\n\n      if (typeof order !== 'undefined') {\n        s.field = field;\n        s.up = order === 'ascend';\n      }\n\n      _this.setState(s, _this.getData);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderTagSearch\", function (name) {\n      return __jsx(TagSearch, {\n        tags: _this.state[name],\n        onAdd: function onAdd(tag) {\n          _this.setState(function (state) {\n            var tags = state[name];\n            tags.filter(function (item) {\n              return item.id !== tag.id;\n            });\n            tags.push(tag);\n            var ret = {\n              page: 1\n            };\n            ret[name] = tags;\n            return ret;\n          }, _this.getData);\n        },\n        onDelete: function onDelete(tag) {\n          _this.setState(function (state) {\n            var tags = state[name];\n            tags.filter(function (item) {\n              return item.id !== tag.id;\n            });\n            var ret = {\n              page: 1\n            };\n            ret[name] = tags;\n            return ret;\n          }, _this.getData);\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderSearch\", function () {\n      return __jsx(Fragment, null, __jsx(_Row, null, __jsx(_Input, {\n        placeholder: \"\\u641C\\u7D22\\u6587\\u7AE0\",\n        onChange: _this.onChange,\n        allowClear: true,\n        prefix: __jsx(Icon, {\n          type: \"search\"\n        }),\n        size: \"large\"\n      })), __jsx(_Row, null, __jsx(_Col, null, \"\\u4ECE\\u8FD9\\u4E9B\\u6807\\u7B7E\\u91CC\\u641C\\u7D22\\uFF1A\"), __jsx(_Col, null, _this.renderTagSearch('with_tags'))), __jsx(_Row, null, __jsx(_Col, null, \"\\u4ECE\\u8FD9\\u4E9B\\u6807\\u7B7E\\u91CC\\u6392\\u9664\\uFF1A\"), __jsx(_Col, null, _this.renderTagSearch('without_tags'))));\n    });\n\n    _this.state = {\n      search: '',\n      loading: false,\n      pagination: {},\n      data: [],\n      total: 0,\n      size: 10,\n      page: 1,\n      with_tags: [],\n      without_tags: [],\n      field: defaultSort,\n      up: defaultUp\n    };\n    return _this;\n  }\n\n  _createClass(AdminPostList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Container, {\n        lg: 20,\n        md: 20,\n        sm: 24,\n        xs: 24\n      }, __jsx(Context.Consumer, null, function (context) {\n        return __jsx(Head, null, __jsx(\"title\", null, \"\\u6587\\u7AE0\\u5217\\u8868|\\u540E\\u53F0|\".concat(context.blog_name)));\n      }), __jsx(_Card, null, this.renderSearch(), __jsx(_Table, {\n        rowKey: function rowKey(record) {\n          return record.id;\n        },\n        columns: this.columns,\n        scroll: {\n          x: true\n        },\n        dataSource: this.state.data,\n        loading: this.state.loading,\n        onChange: this.onTableChange,\n        title: function title() {\n          return __jsx(\"div\", {\n            style: {\n              textAlign: 'right'\n            }\n          }, __jsx(Link, {\n            href: \"/admin/post\"\n          }, __jsx(\"a\", null, __jsx(_Button, {\n            type: \"primary\"\n          }, __jsx(Icon, {\n            type: \"plus\"\n          }), \"\\u65B0\\u5EFA\\u6587\\u7AE0\"))));\n        },\n        pagination: {\n          current: this.state.page,\n          total: this.state.total,\n          pageSize: this.state.size,\n          showSizeChanger: true\n        }\n      })));\n    }\n  }]);\n\n  return AdminPostList;\n}(React.Component);\n\n_defineProperty(AdminPostList, \"defaultProps\", {});\n\nexport default AdminPostList;","map":null,"metadata":{},"sourceType":"module"}