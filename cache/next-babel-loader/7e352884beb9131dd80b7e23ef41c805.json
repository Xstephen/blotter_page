{"ast":null,"code":"import \"antd/lib/card/style/css\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/popconfirm/style/css\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/typography/style/css\";\nimport _Typography from \"antd/lib/typography\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { Icon } from '@ant-design/compatible';\nimport Container from '@/components/container';\nimport DragableTable from '@/components/dragable_table';\nimport { Context } from '@/utils/global';\nimport { menus, menusSet } from '@/utils/api';\nimport ShowNotification from '@/utils/notification';\nimport randomString from '@/utils/random';\n\nclass AdminMenus extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getData\", async () => {\n      this.setState({\n        loading: true\n      });\n      var r = await menus();\n      this.setState({\n        data: r,\n        loading: false\n      });\n    });\n\n    _defineProperty(this, \"renderEditableCell\", (idx, key) => {\n      const width = this.columns.find(item => item.key == key).width;\n      const padding = 16;\n      var style = {\n        width: undefined\n      };\n\n      if (typeof width === 'number') {\n        style.width = width - padding * 2;\n      } else {\n        style.width = `calc(width - ${padding * 2}px)`;\n      }\n\n      return __jsx(\"div\", {\n        style: style\n      }, __jsx(_Typography.Text, {\n        style: {\n          width: '100%'\n        },\n        ellipsis: true,\n        editable: {\n          onChange: value => {\n            this.setState(state => {\n              var {\n                data\n              } = state;\n              data[idx][key] = value;\n              return {\n                data\n              };\n            });\n          }\n        }\n      }, this.state.data[idx][key]));\n    });\n\n    _defineProperty(this, \"columns\", [{\n      dataIndex: 'name',\n      key: 'name',\n      title: '名称',\n      width: 250,\n      ellipsis: true,\n      render: (_, __, idx) => {\n        return this.renderEditableCell(idx, 'name');\n      }\n    }, {\n      dataIndex: 'link',\n      key: 'link',\n      title: '链接',\n      width: 400,\n      ellipsis: true,\n      render: (_, __, idx) => {\n        return this.renderEditableCell(idx, 'link');\n      }\n    }, {\n      dataIndex: 'icon',\n      key: 'icon',\n      title: '图标',\n      width: 250,\n      ellipsis: true,\n      render: (_, __, idx) => {\n        return this.renderEditableCell(idx, 'icon');\n      }\n    }, {\n      key: 'preview',\n      title: '预览',\n      width: 100,\n      ellipsis: true,\n\n      render(value, record) {\n        return __jsx(Icon, {\n          type: record.icon\n        });\n      }\n\n    }, {\n      key: 'op',\n      title: '操作',\n      render: (_, record, idx) => __jsx(_Popconfirm, {\n        title: \"\\u771F\\u7684\\u8981\\u5220\\u9664\\u4E48\\uFF1F\",\n        onConfirm: () => {\n          this.setState(state => {\n            var data = state.data;\n            data = data.filter(item => item.name !== record.name);\n            data.map(d => d);\n            return {\n              data\n            };\n          });\n        },\n        okText: \"\\u5220\\u9664\\uFF01\",\n        cancelText: \"\\u7B97\\u4E86\"\n      }, __jsx(_Button, {\n        size: \"small\",\n        type: \"danger\"\n      }, __jsx(Icon, {\n        type: \"delete\"\n      }), \"\\u5220\\u9664\"))\n    }]);\n\n    _defineProperty(this, \"renderTableHead\", () => __jsx(\"div\", {\n      style: {\n        textAlign: 'right'\n      }\n    }, __jsx(_Button, {\n      onClick: () => {\n        this.setState(state => {\n          var {\n            data\n          } = state;\n          data.push({\n            name: randomString(),\n            link: '',\n            icon: ''\n          });\n          data = data.map(d => d);\n          return {\n            data\n          };\n        });\n      }\n    }, __jsx(Icon, {\n      type: \"plus\"\n    }), \"\\u65B0\\u5EFA\"), ' ', __jsx(_Button, {\n      type: \"primary\",\n      loading: this.state.submitLoading,\n      onClick: async () => {\n        this.setState({\n          submitLoading: true\n        });\n        var r = await menusSet(this.state.data);\n        ShowNotification(r);\n        this.setState({\n          submitLoading: false\n        });\n      }\n    }, __jsx(Icon, {\n      type: \"save\"\n    }), \"\\u4FDD\\u5B58\\u4FEE\\u6539\")));\n\n    this.state = {\n      loading: false,\n      data: [],\n      submitLoading: false\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    return __jsx(Container, {\n      lg: 20,\n      md: 20,\n      sm: 24,\n      xs: 24\n    }, __jsx(Context.Consumer, null, context => __jsx(Head, null, __jsx(\"title\", null, `菜单列表|后台|${context.blog_name}`))), __jsx(_Card, null, __jsx(DragableTable, {\n      columns: this.columns,\n      dataSource: this.state.data,\n      loading: this.state.loading,\n      pagination: false,\n      title: () => this.renderTableHead(),\n      rowKey: (col, idx) => `${col.name}_${idx}`,\n      dragKey: \"root\",\n      scroll: {\n        x: true\n      },\n      moveRow: (i, j) => {\n        this.setState(state => {\n          var {\n            data\n          } = state;\n          var temp = data[i];\n          data[i] = data[j];\n          data[j] = temp;\n          data = data.map(d => d);\n          return {\n            data\n          };\n        });\n      },\n      size: \"large\"\n    })));\n  }\n\n}\n\n_defineProperty(AdminMenus, \"defaultProps\", {});\n\nexport default AdminMenus;","map":null,"metadata":{},"sourceType":"module"}