{"ast":null,"code":"import \"antd/lib/dropdown/style/css\";\nimport _Dropdown from \"antd/lib/dropdown\";\nimport \"antd/lib/list/style/css\";\nimport _List from \"antd/lib/list\";\nimport \"antd/lib/row/style/css\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/col/style/css\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/input-number/style/css\";\nimport _InputNumber from \"antd/lib/input-number\";\nimport \"antd/lib/input/style/css\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/menu/style/css\";\nimport _Menu from \"antd/lib/menu\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { PlusCircleOutlined, CloseCircleOutlined } from '@ant-design/icons';\nimport { useDrag, useDrop } from 'react-dnd';\nimport randomString from '@/utils/random';\nimport { waitUntil } from '@/utils/debounce';\nimport hash from '@/utils/hash';\nconst stringLength = 20;\n\nconst DragItem = props => {\n  const ref = React.useRef();\n  const [{}, drop] = useDrop({\n    accept: props.id,\n    drop: item => {\n      props.swap(item['index'], props.index);\n      return item;\n    }\n  });\n  const [{}, drag] = useDrag({\n    item: {\n      type: props.id,\n      index: props.index\n    }\n  });\n  drop(drag(ref));\n  return __jsx(\"div\", {\n    ref: ref\n  }, props.children);\n};\n\nconst addMenus = callback => __jsx(_Menu, null, __jsx(_Menu.Item, {\n  onClick: () => callback(randomString())\n}, \"\\u6587\\u672C\\u6846\"), __jsx(_Menu.Item, {\n  onClick: () => callback(randomString(stringLength))\n}, \"\\u591A\\u884C\\u6587\\u672C\\u6846\"), __jsx(_Menu.Item, {\n  onClick: () => callback(0)\n}, \"\\u6570\\u5B57\\u6846\"), __jsx(_Menu.Item, {\n  onClick: () => callback([])\n}, \"\\u5217\\u8868\"), __jsx(_Menu.Item, {\n  onClick: () => callback({})\n}, \"\\u5BF9\\u8C61\"));\n\nconst InputField = props => {\n  const id = randomString();\n  return __jsx(_Input, {\n    defaultValue: props.value,\n    onChange: e => {\n      const value = e.target.value;\n      waitUntil(id, () => props.callback(value), 1000);\n    }\n  });\n};\n\nconst AreaField = props => {\n  const id = randomString();\n  return __jsx(_Input.TextArea, {\n    defaultValue: props.value,\n    onChange: e => {\n      const value = e.target.value;\n      waitUntil(id, () => props.callback(value), 1000);\n    }\n  });\n};\n\nconst NumberField = props => {\n  const id = randomString();\n  return __jsx(_InputNumber, {\n    defaultValue: props.value,\n    onChange: e => {\n      const value = e;\n      waitUntil(id, () => props.callback(value), 1000);\n    }\n  });\n};\n\nconst ArrayField = props => {\n  const id = randomString();\n  return __jsx(_List, {\n    grid: {\n      column: 1,\n      gutter: 5\n    },\n    bordered: true,\n    size: \"small\",\n    dataSource: props.value,\n    renderItem: (item, idx) => __jsx(_List.Item, {\n      key: hash(item)\n    }, __jsx(DragItem, {\n      id: id,\n      index: idx,\n      swap: (i, j) => {\n        var v = props.value;\n        const temp = v[i];\n        v[i] = v[j];\n        v[j] = temp;\n        props.callback(v);\n      }\n    }, __jsx(_Row, null, __jsx(_Col, {\n      span: 22\n    }, __jsx(DynamicForm, {\n      key: hash(item),\n      value: item,\n      callback: value => {\n        var v = props.value;\n        v[idx] = value;\n        props.callback(v);\n      }\n    })), __jsx(_Col, {\n      span: 2,\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(_Button, {\n      shape: \"circle\",\n      icon: __jsx(CloseCircleOutlined, null),\n      onClick: () => {\n        var v = props.value.filter((_, i) => i !== idx);\n        props.callback(v);\n      }\n    }))))),\n    header: \"\\u5217\\u8868\",\n    footer: __jsx(\"p\", {\n      style: {\n        textAlign: 'right'\n      }\n    }, __jsx(_Dropdown, {\n      overlay: addMenus(newValue => {\n        var v = props.value;\n        v.push(newValue);\n        props.callback(v);\n      })\n    }, __jsx(_Button, {\n      icon: __jsx(PlusCircleOutlined, null)\n    }, \"\\u65B0\\u5EFA\\u4E00\\u9879\\u5143\\u7D20\")))\n  });\n};\n\nconst ObjectField = props => {\n  const id = randomString();\n  const slice = Object.keys(props.value).map(key => ({\n    key: key,\n    value: props.value[key]\n  }));\n  return __jsx(_List, {\n    grid: {\n      column: 1,\n      gutter: 5\n    },\n    size: \"small\",\n    dataSource: slice,\n    bordered: true,\n    renderItem: item => __jsx(_List.Item, {\n      key: item.key\n    }, __jsx(_Row, null, __jsx(_Col, {\n      span: 4,\n      style: {\n        padding: '0 20px'\n      }\n    }, __jsx(DynamicForm, {\n      value: item.key,\n      callback: value => {\n        var obj = {};\n\n        for (var key in props.value) {\n          if (key == item.key) {\n            obj[value] = props.value[key];\n          } else {\n            obj[key] = props.value[key];\n          }\n        }\n\n        props.callback(obj);\n      }\n    })), __jsx(_Col, {\n      span: 18\n    }, __jsx(DynamicForm, {\n      value: item.value,\n      callback: value => {\n        var v = props.value;\n        v[item.key] = value;\n        props.callback(v);\n      }\n    })), __jsx(_Col, {\n      span: 2,\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(_Button, {\n      shape: \"circle\",\n      icon: __jsx(CloseCircleOutlined, null),\n      onClick: () => {\n        var v = props.value;\n        delete v[item.key];\n        props.callback(v);\n      }\n    })))),\n    header: \"\\u5BF9\\u8C61\",\n    footer: __jsx(\"p\", {\n      style: {\n        textAlign: 'right'\n      }\n    }, __jsx(_Dropdown, {\n      overlay: addMenus(newValue => {\n        var v = props.value;\n        v[randomString()] = newValue;\n        props.callback(v);\n      })\n    }, __jsx(_Button, {\n      icon: __jsx(PlusCircleOutlined, null)\n    }, \"\\u65B0\\u5EFA\\u4E00\\u6761\\u5C5E\\u6027\")))\n  });\n};\n\nconst DynamicForm = props => {\n  var child = __jsx(InputField, {\n    value: props.value,\n    callback: props.callback\n  });\n\n  switch (typeof props.value) {\n    case 'string':\n      if (props.value.length > stringLength) {\n        child = __jsx(AreaField, {\n          value: props.value,\n          callback: props.callback\n        });\n      } else {\n        child = __jsx(InputField, {\n          value: props.value,\n          callback: props.callback\n        });\n      }\n\n      break;\n\n    case 'number':\n      child = __jsx(NumberField, {\n        value: props.value,\n        callback: props.callback\n      });\n      break;\n\n    case 'object':\n      if (Array.isArray(props.value)) {\n        child = __jsx(ArrayField, {\n          value: props.value,\n          callback: props.callback\n        });\n      } else {\n        child = __jsx(ObjectField, {\n          value: props.value,\n          callback: props.callback\n        });\n      }\n\n      break;\n  }\n\n  return child;\n};\n\nexport default DynamicForm;","map":null,"metadata":{},"sourceType":"module"}