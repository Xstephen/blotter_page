{"ast":null,"code":"import \"antd/lib/tag/style/css\";\nimport _Tag from \"antd/lib/tag\";\nimport \"antd/lib/select/style/css\";\nimport _Select from \"antd/lib/select\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { tagsSearch } from '@/utils/api';\nimport { Icon } from '@ant-design/compatible';\nimport { waitUntil } from '@/utils/debounce';\nimport TagPart from '@/components/tag';\n\nclass TagSearch extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onClick\", () => {\n      this.setState({\n        inputVisible: true\n      });\n    });\n\n    _defineProperty(this, \"onChange\", value => {\n      var tag = this.state.options.find(tag => tag.short == value);\n\n      if (typeof tag != 'undefined') {\n        this.add(tag);\n      }\n    });\n\n    _defineProperty(this, \"onSearch\", value => {\n      if (value != '') {\n        waitUntil('search_tags', async () => {\n          var r = await tagsSearch(value);\n          this.setState({\n            options: r.tags\n          });\n        }, 1000);\n      }\n    });\n\n    _defineProperty(this, \"add\", tag => {\n      this.props.onAdd(tag);\n      this.setState({\n        inputVisible: false,\n        options: []\n      });\n    });\n\n    _defineProperty(this, \"onBlur\", () => {\n      this.setState({\n        inputVisible: false\n      });\n    });\n\n    _defineProperty(this, \"renderInput\", () => {\n      return this.state.inputVisible ? __jsx(_Select, {\n        showSearch: true,\n        autoFocus: true,\n        placeholder: \"\\u641C\\u7D22\\u6807\\u7B7E\",\n        style: {\n          width: '150px'\n        },\n        defaultActiveFirstOption: false,\n        showArrow: false,\n        filterOption: false,\n        onSearch: this.onSearch,\n        onChange: this.onChange,\n        onBlur: this.onBlur,\n        notFoundContent: null,\n        size: \"small\"\n      }, this.state.options.map(tag => __jsx(_Select.Option, {\n        key: tag.short,\n        value: tag.short\n      }, tag.name))) : __jsx(_Tag, {\n        onClick: this.onClick,\n        style: {\n          background: '#fff',\n          borderStyle: 'dashed'\n        }\n      }, __jsx(Icon, {\n        type: \"plus\"\n      }), \" \\u65B0\\u6807\\u7B7E\");\n    });\n\n    this.state = {\n      inputVisible: false,\n      options: []\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", null, this.props.tags.map(tag => __jsx(TagPart, {\n      key: tag.short,\n      tag: tag,\n      closable: true,\n      onClose: this.props.onDelete\n    })), this.renderInput());\n  }\n\n}\n\nexport default TagSearch;","map":null,"metadata":{},"sourceType":"module"}