{"ast":null,"code":"import \"antd/lib/list/style/css\";\nimport _List from \"antd/lib/list\";\nimport \"antd/lib/tooltip/style/css\";\nimport _Tooltip from \"antd/lib/tooltip\";\nimport \"antd/lib/comment/style/css\";\nimport _Comment from \"antd/lib/comment\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/popover/style/css\";\nimport _Popover from \"antd/lib/popover\";\nimport \"antd/lib/checkbox/style/css\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport \"antd/lib/input/style/css\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/form/style/css\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/avatar/style/css\";\nimport _Avatar from \"antd/lib/avatar\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Fragment } from 'react';\nimport { Icon } from '@ant-design/compatible';\nimport moment from '@/utils/moment';\nimport { comments, avatar, addComment } from '@/utils/api';\nimport { Context } from '@/utils/global';\nimport ShowNotification from '@/utils/notification';\nimport getOffsetTop from '@/utils/offset';\n\nconst adWarning = __jsx(\"b\", null, \"\\u5E7F\\u544A\\u8BC4\\u8BBA\\uFF0C\\u5DF2\\u88AB\\u5C4F\\u853D\");\n\nconst delWarning = __jsx(\"b\", null, \"\\u8BE5\\u8BC4\\u8BBA\\u5DF2\\u88AB\\u5220\\u9664\");\n\nconst defaultAvatar = 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png';\nconst CommentContext = React.createContext({\n  url: '',\n  callback: () => {}\n});\n\nfunction getCommentID(id) {\n  return `blotter-comment-${id}`;\n}\n\nfunction jumpParent(id) {\n  const target = document.getElementById(getCommentID(id));\n  const top = getOffsetTop(target);\n\n  if (!!target && top > 0) {\n    scrollTo(0, top + 10);\n  }\n}\n\nconst Avatar = props => {\n  const {\n    avatar\n  } = props;\n  return __jsx(_Avatar, {\n    src: avatar ? avatar : defaultAvatar\n  });\n};\n\nconst Editor = props => {\n  const [formRef] = _Form.useForm();\n\n  const {\n    id,\n    closeEditorCallback\n  } = props;\n  const [avatarURL, setAvatarURL] = React.useState('');\n  const [loading, setLoading] = React.useState(false);\n  const {\n    url,\n    callback\n  } = React.useContext(CommentContext);\n  const allFields = ['email', 'raw', 'recv'];\n\n  const onSubmitClick = async () => {\n    var {\n      email,\n      recv,\n      raw\n    } = await formRef.validateFields(allFields);\n    setLoading(true);\n    addComment({\n      url,\n      reply: id,\n      email,\n      recv,\n      raw\n    }).then(r => {\n      if (ShowNotification(r)) {\n        if (!!closeEditorCallback) closeEditorCallback();else formRef.resetFields(allFields);\n        if (!!callback) callback();\n      }\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n\n  const onEmailBlur = () => {\n    avatar(formRef.getFieldValue(`email`), data => setAvatarURL(data.avatar));\n  };\n\n  return __jsx(_Comment, {\n    avatar: __jsx(Avatar, {\n      avatar: avatarURL\n    }),\n    content: __jsx(_Form, {\n      form: formRef,\n      initialValues: {\n        recv: true,\n        email: '',\n        content: ''\n      }\n    }, __jsx(_Form.Item, {\n      name: \"email\",\n      rules: [{\n        type: 'email',\n        message: '邮箱地址不合法'\n      }, {\n        required: true,\n        message: '你需要输入邮箱来表明你的身份'\n      }]\n    }, __jsx(_Input, {\n      onBlur: onEmailBlur,\n      placeholder: \"\\u8F93\\u5165\\u60A8\\u7684\\u90AE\\u7BB1(\\u4EC5\\u7528\\u4E8E\\u6536\\u53D6\\u6709\\u4EBA\\u56DE\\u590D\\u60A8\\u7684\\u901A\\u77E5\\uFF0C\\u4E0D\\u4F1A\\u5728\\u524D\\u7AEF\\u6CC4\\u9732)\"\n    })), __jsx(_Form.Item, null, __jsx(_Form.Item, {\n      name: \"raw\",\n      rules: [{\n        required: true,\n        message: '多说两句?'\n      }, {\n        min: 5,\n        message: '多说两句?'\n      }]\n    }, __jsx(_Input.TextArea, {\n      autoSize: {\n        minRows: 3\n      },\n      placeholder: \"\\u793C\\u8C8C\\u4EA4\\u6D41\\uFF0C\\u81F3\\u5C115\\u4E2A\\u5B57\\u7B26\"\n    })), __jsx(_Form.Item, {\n      name: \"recv\",\n      valuePropName: \"checked\",\n      noStyle: true\n    }, __jsx(_Checkbox, null, \"\\u6536\\u5230\\u56DE\\u590D\\u65F6\\u4F7F\\u7528\\u90AE\\u4EF6\\u901A\\u77E5\")), __jsx(_Form.Item, {\n      noStyle: true\n    }, __jsx(_Popover, {\n      title: \"\\u5E2E\\u52A9\",\n      content: __jsx(\"div\", null, __jsx(\"p\", null, \"\\u8BC4\\u8BBA\\u652F\\u6301Markdown\\uFF0C\\u5982\\u679C\\u6709\\u4EBA\\u56DE\\u590D\\u4F60\\u7684\\u8BC4\\u8BBA\\uFF0C\\u4F1A\\u6709\\u90AE\\u4EF6\\u63D0\\u9192\\u53D1\\u9001\\u5230\\u4F60\\u7684\\u90AE\\u7BB1\\uFF0C\\u5982\\u679C\\u4E0D\\u60F3\\u67E5\\u770B\\uFF0C\\u53EF\\u4EE5\\u53D6\\u6D88\"), __jsx(\"p\", null, \"\\u5934\\u50CF\\u5C06\\u4F18\\u5148\\u4F7F\\u7528\\u90AE\\u7BB1\\u5BF9\\u5E94Github\\u8D26\\u6237\\u5934\\u50CF,\\u5982\\u679C\\u83B7\\u53D6\\u5931\\u8D25\\u5C06\\u4F7F\\u7528\", __jsx(\"a\", {\n        href: \"https://cn.gravatar.com/\"\n      }, \"Gravatar\"), \"\\u5934\\u50CF\"), __jsx(\"p\", null, \"\\u90AE\\u7BB1\\u5730\\u5740\\u4E0D\\u4F1A\\u5728\\u524D\\u7AEF\\u6E32\\u67D3\\uFF0C\\u53EF\\u4EE5\\u907F\\u514D\\u88AB\\u626B\\u63CF\\u5DE5\\u5177\\u8BB0\\u5F55\\uFF0C\\u4F46\\u4ECD\\u53EF\\u80FD\\u901A\\u8FC7\\u5934\\u50CF\\u5730\\u5740\\u9006\\u63A8\\u51FA\\u90AE\\u7BB1\"), __jsx(\"p\", null, \"\\u8BC4\\u8BBA\\u5185\\u5BB9\\u8BF7\\u9075\\u5B88\\u76F8\\u5E94\\u6CD5\\u5F8B\\u6CD5\\u89C4\\uFF0C\\u5E76\\u4E14\\u8BF7\\u4E0D\\u8981\\u53D1\\u5E03\\u5E7F\\u544A\"))\n    }, __jsx(Icon, {\n      type: \"question-circle\"\n    }))), __jsx(_Form.Item, {\n      noStyle: true\n    }, __jsx(_Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      onClick: onSubmitClick,\n      loading: loading,\n      style: {\n        float: 'right'\n      }\n    }, \"\\u8BC4\\u8BBA\"))))\n  });\n};\n\nconst Comment = props => {\n  const {\n    comment,\n    depth,\n    quote,\n    parent\n  } = props;\n  const [reply, setReply] = React.useState(false);\n  const time = moment(comment.time);\n  const context = React.useContext(Context);\n\n  const childrenAndEditor = () => __jsx(Fragment, null, reply ? __jsx(Editor, {\n    id: comment.id,\n    closeEditorCallback: () => setReply(false)\n  }) : null, __jsx(CommentList, {\n    comments: comment.children,\n    depth: depth + 1,\n    parent: comment\n  }));\n\n  var maxDepth = context.big_screen ? 5 : 2;\n  var actions;\n\n  if (quote) {\n    actions = [__jsx(\"span\", {\n      key: \"comment-nested-reply-to\",\n      onClick: () => jumpParent(comment.id)\n    }, \"\\u8DF3\\u8F6C\\u5230\\u8BE5\\u8BC4\\u8BBA\")];\n  } else {\n    actions = [reply ? __jsx(\"span\", {\n      key: \"comment-nested-reply-to\",\n      onClick: () => setReply(false)\n    }, \"\\u53D6\\u6D88\\u56DE\\u590D\", __jsx(Icon, {\n      type: \"close\"\n    })) : __jsx(\"span\", {\n      key: \"comment-nested-reply-to\",\n      onClick: () => setReply(true)\n    }, \"\\u56DE\\u590D\"), __jsx(\"span\", {\n      key: \"comment-nested-reply-to\"\n    }, comment.recv ? __jsx(_Popover, {\n      content: \"\\u5F53\\u4F60\\u56DE\\u590D\\u8BE5\\u8BC4\\u8BBA\\uFF0C\\u8BC4\\u8BBA\\u8005\\u4F1A\\u6536\\u5230\\u90AE\\u4EF6\\u63D0\\u9192\\uFF08\\u4F46\\u662F\\u4ED6/\\u5979\\u4E0D\\u4E00\\u5B9A\\u4F1A\\u770B\\u90AE\\u4EF6\\uFF09\"\n    }, __jsx(Icon, {\n      type: \"mail\"\n    })) : __jsx(_Popover, {\n      content: \"\\u5F53\\u4F60\\u56DE\\u590D\\u8BE5\\u8BC4\\u8BBA\\uFF0C\\u8BC4\\u8BBA\\u8005\\u4E0D\\u4F1A\\u6536\\u5230\\u90AE\\u4EF6\\u63D0\\u9192\\uFF08\\u6240\\u4EE5\\u4F60\\u53EF\\u80FD\\u65E0\\u6CD5\\u5F97\\u5230\\u53CD\\u9988\\uFF09\"\n    }, __jsx(Icon, {\n      type: \"disconnect\"\n    })))];\n  }\n\n  return __jsx(\"div\", {\n    id: quote ? '' : getCommentID(comment.id),\n    className: \"fullWidth\"\n  }, __jsx(_Comment, {\n    style: quote ? {\n      borderLeft: '#ccc 5px solid',\n      paddingLeft: 10\n    } : {},\n    actions: actions,\n    author: comment.email,\n    avatar: __jsx(Avatar, {\n      avatar: comment.avatar\n    }),\n    content: comment.ad ? adWarning : comment.show ? __jsx(\"div\", null, !quote && depth != 1 && depth >= maxDepth ? __jsx(Comment, {\n      comment: parent,\n      depth: depth,\n      quote: true\n    }) : null, __jsx(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: comment.content\n      }\n    })) : delWarning,\n    datetime: __jsx(_Tooltip, {\n      title: time.format('YYYY-MM-DD HH:mm:ss')\n    }, __jsx(\"span\", null, time.fromNow()))\n  }, !quote && depth < maxDepth ? childrenAndEditor() : null), !quote && depth >= maxDepth ? childrenAndEditor() : null);\n};\n\nconst CommentList = props => {\n  const {\n    comments,\n    depth,\n    parent,\n    total,\n    loading\n  } = props;\n  return comments.length || depth == 1 ? __jsx(_List, {\n    className: \"comment-list\",\n    header: !!total ? `共 ${total} 条评论` : null,\n    itemLayout: \"horizontal\",\n    dataSource: comments,\n    split: false,\n    renderItem: (comment, idx) => __jsx(_List.Item, {\n      key: comment.id,\n      style: {\n        padding: 0\n      }\n    }, __jsx(Comment, {\n      comment: comment,\n      depth: depth,\n      quote: false,\n      parent: parent\n    })),\n    loading: loading === true\n  }) : null;\n};\n\nclass CommentPart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"initialComment\", () => {\n      this.setState({\n        loading: true\n      });\n      comments(this.props.url, data => {\n        this.setState(() => ({\n          total: data.total,\n          comments: data.comments.reverse(),\n          loading: false\n        }));\n      }).finally(() => {\n        this.setState({\n          loading: false\n        });\n      });\n    });\n\n    this.state = {\n      total: 0,\n      comments: [],\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    this.initialComment();\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      id: \"blotter-comment\"\n    }, __jsx(CommentContext.Provider, {\n      value: {\n        url: this.props.url,\n        callback: this.initialComment\n      }\n    }, __jsx(Editor, {\n      id: \"000000000000\"\n    }), __jsx(CommentList, {\n      comments: this.state.comments,\n      depth: 1,\n      total: this.state.total,\n      loading: this.state.loading\n    })));\n  }\n\n}\n\nexport default CommentPart;","map":null,"metadata":{},"sourceType":"module"}