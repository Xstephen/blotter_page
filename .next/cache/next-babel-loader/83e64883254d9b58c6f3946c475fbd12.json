{"ast":null,"code":"import \"antd/lib/card/style/css\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/table/style/css\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/input/style/css\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/popconfirm/style/css\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/notification/style/css\";\nimport _notification from \"antd/lib/notification\";\nimport \"antd/lib/avatar/style/css\";\nimport _Avatar from \"antd/lib/avatar\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { Icon } from '@ant-design/compatible';\nimport { CheckOutlined, CloseOutlined } from '@ant-design/icons';\nimport Container, { Space } from '@/components/container';\nimport { postDelete, users, reset_password } from '@/utils/api';\nimport { Context } from '@/utils/global';\nimport ShowNotification from '@/utils/notification';\nimport { waitUntil } from '@/utils/debounce';\nconst defaultSort = 'publish_time';\nconst defaultUp = false;\n\nclass AdminUsers extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onChange\", e => {\n      var value = e.target.value;\n      waitUntil('users_search', () => {\n        this.setState({\n          search: value,\n          page: 1,\n          size: 10\n        }, this.getData);\n      }, 1000);\n    });\n\n    _defineProperty(this, \"getData\", async () => {\n      this.setState({\n        loading: true\n      });\n      var r = await users(this.state.page, this.state.size, this.state.search, this.state.field, this.state.up ? 1 : -1);\n      this.setState({\n        total: r.total,\n        data: r.users,\n        loading: false\n      });\n    });\n\n    _defineProperty(this, \"onDelete\", async id => {\n      var r = await postDelete(id);\n      ShowNotification(r);\n      this.setState(state => ({\n        data: state.data.filter(post => post.id != id)\n      }));\n    });\n\n    _defineProperty(this, \"onTableChange\", (pagination, filters, sorter, extra) => {\n      const {\n        current,\n        pageSize\n      } = pagination;\n      const {\n        field,\n        order\n      } = sorter;\n      var s = {};\n      if (!!current) s.page = current;\n      if (!!pageSize) s.size = pageSize;\n\n      if (typeof order !== 'undefined') {\n        s.field = field;\n        s.up = order === 'ascend';\n      }\n\n      this.setState(s, this.getData);\n    });\n\n    this.state = {\n      search: '',\n      search_fields: ['title'],\n      loading: false,\n      pagination: {},\n      data: [],\n      total: 0,\n      size: 10,\n      page: 1,\n      with_tags: [],\n      without_tags: [],\n      field: defaultSort,\n      up: defaultUp\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    const columns = [{\n      title: '头像',\n      key: 'avatar',\n      dataIndex: 'avatar',\n      width: 50,\n      render: value => __jsx(_Avatar, {\n        src: value\n      })\n    }, {\n      title: '名称',\n      key: 'username',\n      dataIndex: 'username',\n      ellipsis: true,\n      render: value => __jsx(Link, {\n        href: \"/user/[username]\",\n        as: `/user/${value}`\n      }, value)\n    }, {\n      title: 'QQ',\n      key: 'qq',\n      dataIndex: 'qq',\n      ellipsis: true\n    }, {\n      title: '邮箱',\n      key: 'email',\n      dataIndex: 'email',\n      ellipsis: true\n    }, {\n      title: '绑定 QQ',\n      key: 'qq_union_id',\n      dataIndex: 'qq_union_id',\n      render: value => value === '' ? __jsx(CloseOutlined, {\n        style: {\n          color: 'red'\n        }\n      }) : __jsx(CheckOutlined, {\n        style: {\n          color: 'green'\n        }\n      })\n    }, {\n      title: '绑定 Github',\n      key: 'github_id',\n      dataIndex: 'github_id',\n      render: value => value === 0 ? __jsx(CloseOutlined, {\n        style: {\n          color: 'red'\n        }\n      }) : __jsx(CheckOutlined, {\n        style: {\n          color: 'green'\n        }\n      })\n    }, {\n      title: '操作',\n      key: 'op',\n      render: (_, record) => __jsx(_Popconfirm, {\n        title: \"\\u786E\\u5B9A\\u8981\\u91CD\\u7F6E\\u5BC6\\u7801\\uFF1F\",\n        onConfirm: async e => {\n          const r = await reset_password(record.id);\n\n          _notification.success({\n            message: '修改成功',\n            description: `新密码：${r.password}`,\n            duration: null\n          });\n        }\n      }, __jsx(_Button, {\n        danger: true\n      }, \"\\u91CD\\u7F6E\\u5BC6\\u7801\"))\n    }];\n    return __jsx(Container, {\n      lg: 20,\n      md: 20,\n      sm: 24,\n      xs: 24\n    }, __jsx(Context.Consumer, null, context => __jsx(Head, null, __jsx(\"title\", null, `用户列表|后台|${context.blog_name}`))), __jsx(_Card, null, __jsx(Space, null, __jsx(_Input, {\n      placeholder: \"\\u641C\\u7D22\\u7528\\u6237\",\n      onChange: this.onChange,\n      allowClear: true,\n      prefix: __jsx(Icon, {\n        type: \"search\"\n      }),\n      size: \"large\"\n    }), __jsx(_Table, {\n      rowKey: record => record.id,\n      columns: columns,\n      scroll: {\n        x: true\n      },\n      dataSource: this.state.data,\n      loading: this.state.loading,\n      onChange: (a, b, c, d) => this.onTableChange(a, b, Array.isArray(c) ? c[0] : c, d),\n      pagination: {\n        current: this.state.page,\n        total: this.state.total,\n        pageSize: this.state.size,\n        showSizeChanger: true\n      }\n    }))));\n  }\n\n}\n\n_defineProperty(AdminUsers, \"defaultProps\", {});\n\nexport default AdminUsers;","map":null,"metadata":{},"sourceType":"module"}