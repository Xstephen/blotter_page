{"ast":null,"code":"import \"antd/lib/tabs/style/css\";\nimport _Tabs from \"antd/lib/tabs\";\nimport \"antd/lib/card/style/css\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/typography/style/css\";\nimport _Typography from \"antd/lib/typography\";\nimport \"antd/lib/popconfirm/style/css\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/upload/style/css\";\nimport _Upload from \"antd/lib/upload\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport \"antd/lib/notification/style/css\";\nimport _notification from \"antd/lib/notification\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/select/style/css\";\nimport _Select from \"antd/lib/select\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { SyncOutlined, SaveOutlined, DeleteOutlined } from '@ant-design/icons';\nimport * as qiniu from 'qiniu-js';\nimport { Space } from '@/components/container';\nimport Image from '@/components/image';\nimport { qiniu_get_buckets, qiniu_get_images, qiniu_get_token } from '@/utils/api';\nvar prefixs = ['post', 'tags', 'travels'];\nvar img_file_type = ['psd', 'jpg', 'jpeg', 'png', 'gif', 'webp', 'tiff', 'bmp'];\n\nfunction generateThumbnail(img) {\n  if (img_file_type.indexOf(img.split('.').slice(-1)[0]) != -1) return \"\".concat(img, \"?imageView2/0/w/128/h/128/interlace/1/q/50\");else img;\n}\n\nfunction BucketSelector(props) {\n  var bucket = props.bucket,\n      prefix = props.prefix,\n      _props$onChange = props.onChange,\n      _onChange = _props$onChange === void 0 ? function () {} : _props$onChange,\n      _props$refresh = props.refresh,\n      refresh = _props$refresh === void 0 ? function () {} : _props$refresh;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loading = _React$useState2[0],\n      setLoading = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      buckets = _React$useState4[0],\n      setBuckets = _React$useState4[1];\n\n  var initial = function initial() {\n    setLoading(true);\n    qiniu_get_buckets().then(function (r) {\n      setBuckets(r.buckets);\n      if (bucket == '' && r.buckets.length != 0) _onChange(r.buckets[0], '');\n    })[\"catch\"](console.error)[\"finally\"](function () {\n      return setLoading(false);\n    });\n  };\n\n  React.useEffect(initial, []);\n  return __jsx(Space, {\n    direction: \"horizontal\"\n  }, __jsx(\"strong\", null, \"\\u5B58\\u50A8\\u7A7A\\u95F4\\uFF1A\"), __jsx(_Select, {\n    value: bucket,\n    onChange: function onChange(b) {\n      return _onChange(b, prefix);\n    },\n    loading: loading\n  }, buckets.map(function (b) {\n    return __jsx(_Select.Option, {\n      key: b,\n      value: b\n    }, b);\n  })), __jsx(_Button, {\n    onClick: initial,\n    icon: __jsx(SyncOutlined, {\n      spin: loading\n    })\n  }), __jsx(_Select, {\n    value: prefix,\n    onChange: function onChange(p) {\n      return _onChange(bucket, p);\n    },\n    loading: loading\n  }, prefixs.map(function (p) {\n    return __jsx(_Select.Option, {\n      key: p,\n      value: p\n    }, p);\n  })), __jsx(_Button, {\n    onClick: refresh\n  }, \"\\u5237\\u65B0\\u56FE\\u7247\"));\n}\n\nfunction Upload(props) {\n  var bucket = props.bucket,\n      prefix = props.prefix;\n\n  var upload = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n      var token, filename, observable, subscription;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return qiniu_get_token();\n\n            case 2:\n              token = _context.sent.token;\n              filename = !!prefix ? \"\".concat(prefix, \"/\").concat(file.name) : file.name;\n              observable = qiniu.upload(file, filename, token, {}, {});\n              subscription = observable.subscribe({\n                next: function next(res) {\n                  console.log(res);\n                },\n                error: function error(err) {\n                  _notification.error({\n                    message: \"\".concat(filename, \" \\u4E0A\\u4F20\\u53D1\\u751F\\u9519\\u8BEF\"),\n                    description: \"\".concat(err)\n                  });\n\n                  console.error(err);\n                },\n                complete: function complete(res) {\n                  _notification.success({\n                    message: \"\".concat(filename, \" \\u4E0A\\u4F20\\u6210\\u529F\")\n                  });\n                }\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function upload(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(_Upload.Dragger, {\n    name: 'file',\n    multiple: true,\n    customRequest: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(opts) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                console.log(opts);\n                upload(opts.file);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    showUploadList: false\n  }, __jsx(\"div\", {\n    style: {\n      height: 100,\n      width: '100%'\n    }\n  }, __jsx(\"p\", null, \"\\u5C06\\u6587\\u4EF6\\u62D6\\u62FD\\u5230\\u6B64\\u5904\\u4E0A\\u4F20\")));\n}\n\nfunction ImageList(props) {\n  var bucket = props.bucket,\n      prefix = props.prefix,\n      _props$refresh2 = props.refresh,\n      refresh = _props$refresh2 === void 0 ? function () {} : _props$refresh2;\n\n  var _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      images = _React$useState6[0],\n      setImages = _React$useState6[1];\n\n  var _React$useState7 = React.useState(''),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      marker = _React$useState8[0],\n      setMarker = _React$useState8[1];\n\n  var _React$useState9 = React.useState(false),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      hasNext = _React$useState10[0],\n      setHasNext = _React$useState10[1];\n\n  var _React$useState11 = React.useState(false),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      loading = _React$useState12[0],\n      setLoading = _React$useState12[1];\n\n  var _React$useState13 = React.useState(0),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      id = _React$useState14[0],\n      setID = _React$useState14[1];\n\n  var refreshRef = React.useRef(function () {\n    return getData(bucket, prefix, '');\n  });\n  React.useEffect(function () {\n    refresh(refreshRef);\n  }, [bucket, prefix]);\n\n  var getData = function getData(b, p, m) {\n    console.log(b, p, m);\n    setLoading(true);\n    var thisID = 0;\n    setID(function (i) {\n      thisID = i + 1;\n      return thisID;\n    });\n    qiniu_get_images(b, p, m, 5).then(function (r) {\n      setID(function (newID) {\n        console.log(b, p, m, thisID, newID);\n\n        if (thisID == newID) {\n          setImages(function (images) {\n            return images.concat(r.files);\n          });\n          setMarker(r.marker);\n          setHasNext(r.has_next);\n        }\n\n        return newID;\n      });\n    })[\"catch\"](console.error)[\"finally\"](function () {\n      setLoading(false);\n    });\n  };\n\n  React.useEffect(function () {\n    return getData(bucket, '', '');\n  }, [bucket]);\n  React.useEffect(function () {\n    setImages([]);\n    setMarker('');\n    setHasNext(false);\n    console.log('clear');\n    getData(bucket, prefix, '');\n  }, [prefix]);\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column'\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-evenly',\n      flexWrap: 'wrap',\n      alignContent: 'center',\n      flexDirection: 'row'\n    }\n  }, images.map(function (image, idx) {\n    return __jsx(_Card, {\n      style: {\n        width: 128,\n        margin: 10\n      },\n      size: \"small\",\n      cover: __jsx(Image, {\n        src: image.name,\n        thumbnail: generateThumbnail(image.name),\n        height: \"128px\",\n        width: \"128px\",\n        clickable: true\n      }),\n      actions: [__jsx(SaveOutlined, null), __jsx(_Popconfirm, {\n        title: \"\\u786E\\u5B9A\\u5220\\u9664\\uFF1F\",\n        onConfirm: function onConfirm() {}\n      }, __jsx(DeleteOutlined, {\n        style: {\n          color: 'red'\n        }\n      }))]\n    }, __jsx(_Typography.Text, {\n      ellipsis: true,\n      copyable: true,\n      editable: {\n        onChange: function onChange() {}\n      }\n    }, image.name));\n  })), __jsx(_Button, {\n    onClick: function onClick() {\n      return getData(bucket, prefix, marker);\n    },\n    disabled: !hasNext,\n    loading: loading\n  }, \"\\u83B7\\u53D6\\u66F4\\u591A\"));\n}\n\nfunction Qiniu(props) {\n  var _props$defaultTab = props.defaultTab,\n      defaultTab = _props$defaultTab === void 0 ? 'upload' : _props$defaultTab;\n\n  var _React$useState15 = React.useState(''),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      bucket = _React$useState16[0],\n      setBucket = _React$useState16[1];\n\n  var _React$useState17 = React.useState(''),\n      _React$useState18 = _slicedToArray(_React$useState17, 2),\n      prefix = _React$useState18[0],\n      setPrefix = _React$useState18[1];\n\n  var _React$useState19 = React.useState(undefined),\n      _React$useState20 = _slicedToArray(_React$useState19, 2),\n      ref = _React$useState20[0],\n      setRef = _React$useState20[1];\n\n  var setState = React.useCallback(function (b, p) {\n    console.log(b, p, bucket, prefix);\n    if (b !== bucket) setBucket(b);\n    if (p !== prefix) setPrefix(p);\n  }, [bucket, prefix]);\n  return __jsx(Space, {\n    direction: \"vertical\"\n  }, __jsx(BucketSelector, {\n    bucket: bucket,\n    prefix: prefix,\n    onChange: setState,\n    refresh: !!ref ? ref.current : function () {}\n  }), __jsx(_Tabs, {\n    defaultValue: defaultTab,\n    tabPosition: \"left\"\n  }, __jsx(_Tabs.TabPane, {\n    tab: \"\\u4E0A\\u4F20\\u56FE\\u7247\",\n    key: \"upload\"\n  }, __jsx(Upload, {\n    bucket: bucket,\n    prefix: prefix\n  })), __jsx(_Tabs.TabPane, {\n    tab: \"\\u56FE\\u7247\\u5217\\u8868\",\n    key: \"list\"\n  }, __jsx(ImageList, {\n    bucket: bucket,\n    prefix: prefix\n  }))));\n}\n\nexport default Qiniu;\nexport { BucketSelector, Upload, ImageList };","map":null,"metadata":{},"sourceType":"module"}