{"ast":null,"code":"import \"antd/lib/card/style/css\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/table/style/css\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/form/style/css\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/input/style/css\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/popconfirm/style/css\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/typography/style/css\";\nimport _Typography from \"antd/lib/typography\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { Icon } from '@ant-design/compatible';\nimport { FileImageOutlined } from '@ant-design/icons';\nimport Container from '@/components/container';\nimport TagPart from '@/components/tag';\nimport Qiniu from '@/components/upload';\nimport { Context } from '@/utils/global';\nimport { adminTags, tagDelete, tagEdit } from '@/utils/api';\nimport ShowNotification from '@/utils/notification';\nimport { waitUntil } from '@/utils/debounce';\nimport randomString from '@/utils/random';\nconst defaultSortField = 'count';\nconst defaultSortInc = false;\n\nclass AdminTagList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getData\", async (keyword, size, page = 1, field = defaultSortField, up = defaultSortInc) => {\n      this.setState({\n        loading: true,\n        page,\n        size\n      });\n      var r = await adminTags(keyword, page, size, field, up);\n      this.setState({\n        data: r.tags,\n        total: r.total,\n        loading: false\n      });\n    });\n\n    _defineProperty(this, \"renderEditableCell\", (idx, key, textarea = false) => {\n      const width = textarea ? '100%' : this.columns.find(item => item.key == key).width;\n      const padding = 16;\n      var style = {\n        width: undefined\n      };\n\n      if (typeof width === 'number') {\n        style.width = width - padding * 2;\n      } else {\n        style.width = `calc(width - ${padding * 2}px)`;\n      }\n\n      return __jsx(\"div\", {\n        style: style\n      }, __jsx(_Typography.Text, {\n        style: {\n          width: '100%'\n        },\n        ellipsis: true,\n        editable: {\n          onChange: value => {\n            this.setState(state => {\n              var {\n                data\n              } = state;\n              data[idx][key] = value;\n              return {\n                data\n              };\n            });\n          }\n        }\n      }, this.state.data[idx][key]));\n    });\n\n    _defineProperty(this, \"columns\", [{\n      title: '名称',\n      key: 'name',\n      dataIndex: 'name',\n      sorter: true,\n      width: 200,\n      ellipsis: true,\n      render: (_, __, idx) => this.renderEditableCell(idx, 'name')\n    }, {\n      title: '链接',\n      key: 'short',\n      dataIndex: 'short',\n      sorter: true,\n      width: 200,\n      ellipsis: true,\n      render: (_, __, idx) => this.renderEditableCell(idx, 'short')\n    }, {\n      title: '图标',\n      key: 'icon',\n      dataIndex: 'icon',\n      sorter: true,\n      width: 200,\n      ellipsis: true,\n      render: (_, __, idx) => this.renderEditableCell(idx, 'icon')\n    }, {\n      title: '颜色',\n      key: 'color',\n      dataIndex: 'color',\n      sorter: true,\n      width: 150,\n      ellipsis: true,\n      render: (_, __, idx) => this.renderEditableCell(idx, 'color')\n    }, {\n      title: '预览',\n      key: 'view',\n      dataIndex: 'view',\n      width: 100,\n      ellipsis: true,\n      render: (_, record, __) => __jsx(TagPart, {\n        tag: record\n      })\n    }, {\n      title: '文章个数',\n      key: 'count',\n      dataIndex: 'count',\n      width: 120,\n      ellipsis: true\n    }, {\n      title: '操作',\n      key: 'op',\n      render: (_, record, idx) => __jsx(\"div\", {\n        style: {\n          whiteSpace: 'nowrap'\n        }\n      }, __jsx(_Button, {\n        size: \"small\",\n        onClick: () => this.onEdit(idx)\n      }, __jsx(Icon, {\n        type: \"edit\"\n      }), \"\\u4FEE\\u6539\"), ' ', __jsx(_Popconfirm, {\n        title: \"\\u771F\\u7684\\u8981\\u5220\\u9664\\u4E48\\uFF1F\",\n        onConfirm: () => {\n          this.onDelete(record.id);\n        },\n        okText: \"\\u5220\\u9664\\uFF01\",\n        cancelText: \"\\u7B97\\u4E86\"\n      }, __jsx(_Button, {\n        size: \"small\",\n        danger: true\n      }, __jsx(Icon, {\n        type: \"delete\"\n      }), \"\\u5220\\u9664\")))\n    }]);\n\n    _defineProperty(this, \"onInsert\", () => {\n      this.setState(state => {\n        var data = state.data;\n        data.unshift({\n          id: '',\n          name: randomString(),\n          short: randomString(),\n          color: '',\n          icon: '',\n          count: 0,\n          description: ''\n        });\n        data = data.map(d => d);\n        return {\n          data\n        };\n      });\n    });\n\n    _defineProperty(this, \"onEdit\", async idx => {\n      var tag = this.state.data[idx];\n      var r = await tagEdit(tag.id, tag.name, tag.short, tag.color, tag.icon, tag.description);\n      ShowNotification(r);\n    });\n\n    _defineProperty(this, \"onDelete\", async id => {\n      var r = await tagDelete(id);\n      ShowNotification(r);\n      this.setState(state => ({\n        data: state.data.filter(tag => tag.id != id)\n      }));\n    });\n\n    _defineProperty(this, \"searchOnChange\", e => {\n      var value = e.target.value;\n      waitUntil('admin_tags_search', () => {\n        this.setState(state => {\n          return {\n            page: 1,\n            keyword: value\n          };\n        });\n        this.getData(value, this.state.size);\n      }, 1000);\n    });\n\n    _defineProperty(this, \"onTableChange\", (pagination, filters, sorter, extra) => {\n      const {\n        current,\n        pageSize\n      } = pagination;\n      const {\n        field,\n        order\n      } = sorter;\n      var defaultSort = typeof order === 'undefined';\n      this.getData(this.state.keyword, pageSize, current, defaultSort ? defaultSortField : `${field}`, defaultSort ? defaultSortInc : order === 'ascend');\n    });\n\n    _defineProperty(this, \"renderImages\", () => {\n      return __jsx(\"div\", null, __jsx(_Button, {\n        shape: \"circle\",\n        size: \"large\",\n        type: \"primary\",\n        danger: this.state.upload,\n        style: {\n          position: 'fixed',\n          right: 20,\n          top: 50,\n          zIndex: 2\n        },\n        onClick: () => this.setState(state => ({\n          upload: !state.upload\n        })),\n        icon: __jsx(FileImageOutlined, null)\n      }), __jsx(\"div\", {\n        className: ['upload', 'shadow'].join(' '),\n        style: _objectSpread({\n          right: 120,\n          top: 50\n        }, this.state.upload ? {\n          opacity: 1,\n          visibility: 'visible'\n        } : {\n          opacity: 0,\n          visibility: 'hidden'\n        })\n      }, __jsx(Qiniu, {\n        defaultTab: \"upload\"\n      })));\n    });\n\n    this.state = {\n      loading: false,\n      pagination: {},\n      data: [],\n      total: 0,\n      page: 1,\n      size: 10,\n      keyword: '',\n      upload: false\n    };\n  }\n\n  componentDidMount() {\n    this.getData('', 10);\n  }\n\n  render() {\n    return __jsx(Container, {\n      lg: 20,\n      md: 20,\n      sm: 24,\n      xs: 24\n    }, __jsx(Context.Consumer, null, context => __jsx(Head, null, __jsx(\"title\", null, `标签列表|后台|${context.blog_name}`))), this.renderImages(), __jsx(_Card, null, __jsx(_Form, {\n      layout: \"inline\"\n    }, __jsx(_Form.Item, {\n      wrapperCol: {\n        md: 20,\n        sm: 24\n      }\n    }, __jsx(_Input, {\n      placeholder: \"\\u641C\\u7D22\\u6807\\u7B7E\",\n      onChange: this.searchOnChange\n    })), __jsx(_Form.Item, {\n      wrapperCol: {\n        md: 4,\n        sm: 24\n      }\n    }, __jsx(_Button, {\n      type: \"primary\",\n      onClick: this.onInsert\n    }, __jsx(Icon, {\n      type: \"plus\"\n    }), \"\\u65B0\\u5EFA\\u6807\\u7B7E\"))), __jsx(_Table, {\n      rowKey: record => record.id,\n      columns: this.columns,\n      scroll: {\n        x: true\n      },\n      dataSource: this.state.data,\n      loading: this.state.loading,\n      onChange: (a, b, c, d) => this.onTableChange(a, b, Array.isArray(c) ? c[0] : c, d),\n      expandedRowRender: (_, idx) => this.renderEditableCell(idx, 'description', true),\n      pagination: {\n        current: this.state.page,\n        total: this.state.total,\n        pageSize: this.state.size,\n        showSizeChanger: true\n      }\n    })));\n  }\n\n}\n\n_defineProperty(AdminTagList, \"defaultProps\", {});\n\nexport default AdminTagList;","map":null,"metadata":{},"sourceType":"module"}