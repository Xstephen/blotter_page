{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport \"antd/lib/list/style/css\";\nimport _List from \"antd/lib/list\";\nimport \"antd/lib/tooltip/style/css\";\nimport _Tooltip from \"antd/lib/tooltip\";\nimport \"antd/lib/comment/style/css\";\nimport _Comment from \"antd/lib/comment\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/popover/style/css\";\nimport _Popover from \"antd/lib/popover\";\nimport \"antd/lib/checkbox/style/css\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport \"antd/lib/input/style/css\";\nimport _Input from \"antd/lib/input\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"antd/lib/form/style/css\";\nimport _Form from \"antd/lib/form\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport \"antd/lib/avatar/style/css\";\nimport _Avatar from \"antd/lib/avatar\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Fragment } from 'react';\nimport { Icon } from '@ant-design/compatible';\nimport moment from 'moment';\nimport { comments, avatar, addComment } from '@/utils/api';\nimport { Context } from '@/utils/global';\nimport ShowNotification from '@/utils/notification';\n\nvar adWarning = __jsx(\"b\", null, \"\\u5E7F\\u544A\\u8BC4\\u8BBA\\uFF0C\\u5DF2\\u88AB\\u5C4F\\u853D\");\n\nvar delWarning = __jsx(\"b\", null, \"\\u8BE5\\u8BC4\\u8BBA\\u5DF2\\u88AB\\u5220\\u9664\");\n\nvar defaultAvatar = 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png';\nvar CommentContext = React.createContext({\n  url: '',\n  callback: function callback() {}\n});\n\nfunction getCommentID(id) {\n  return \"blotter-comment-\".concat(id);\n}\n\nfunction getOffsetTop(e) {\n  return e.offsetTop + (e.offsetParent ? getOffsetTop(e.offsetParent) : 0);\n}\n\nfunction jumpParent(id) {\n  var target = document.getElementById(getCommentID(id));\n  var top = getOffsetTop(target);\n\n  if (!!target && top > 0) {\n    scrollTo(0, top + 10);\n  }\n}\n\nvar Avatar = function Avatar(props) {\n  var avatar = props.avatar;\n  return __jsx(_Avatar, {\n    src: avatar ? avatar : defaultAvatar\n  });\n};\n\nvar Editor = function Editor(props) {\n  var _Form$useForm = _Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      formRef = _Form$useForm2[0];\n\n  var id = props.id,\n      closeEditorCallback = props.closeEditorCallback;\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      avatarURL = _React$useState2[0],\n      setAvatarURL = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      loading = _React$useState4[0],\n      setLoading = _React$useState4[1];\n\n  var _React$useContext = React.useContext(CommentContext),\n      url = _React$useContext.url,\n      callback = _React$useContext.callback;\n\n  var allFields = ['email', 'raw', 'recv'];\n\n  var onSubmitClick = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$formRef$valida, email, recv, raw;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return formRef.validateFields(allFields);\n\n            case 2:\n              _yield$formRef$valida = _context.sent;\n              email = _yield$formRef$valida.email;\n              recv = _yield$formRef$valida.recv;\n              raw = _yield$formRef$valida.raw;\n              setLoading(true);\n              addComment({\n                url: url,\n                reply: id,\n                email: email,\n                recv: recv,\n                raw: raw\n              }).then(function (r) {\n                if (ShowNotification(r)) {\n                  if (!!closeEditorCallback) closeEditorCallback();else formRef.resetFields(allFields);\n                  if (!!callback) callback();\n                }\n              })[\"finally\"](function () {\n                setLoading(false);\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onSubmitClick() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var onEmailBlur = function onEmailBlur() {\n    avatar(formRef.getFieldValue(\"email\"), function (data) {\n      return setAvatarURL(data.avatar);\n    });\n  };\n\n  return __jsx(_Comment, {\n    avatar: __jsx(Avatar, {\n      avatar: avatarURL\n    }),\n    content: __jsx(_Form, {\n      form: formRef,\n      initialValues: {\n        recv: true,\n        email: '',\n        content: ''\n      }\n    }, __jsx(_Form.Item, {\n      name: \"email\",\n      rules: [{\n        type: 'email',\n        message: '邮箱地址不合法'\n      }, {\n        required: true,\n        message: '你需要输入邮箱来表明你的身份'\n      }]\n    }, __jsx(_Input, {\n      onBlur: onEmailBlur,\n      placeholder: \"\\u8F93\\u5165\\u60A8\\u7684\\u90AE\\u7BB1(\\u4EC5\\u7528\\u4E8E\\u6536\\u53D6\\u6709\\u4EBA\\u56DE\\u590D\\u60A8\\u7684\\u901A\\u77E5\\uFF0C\\u4E0D\\u4F1A\\u5728\\u524D\\u7AEF\\u6CC4\\u9732)\"\n    })), __jsx(_Form.Item, null, __jsx(_Form.Item, {\n      name: \"raw\",\n      rules: [{\n        required: true,\n        message: '多说两句?'\n      }, {\n        min: 5,\n        message: '多说两句?'\n      }]\n    }, __jsx(_Input.TextArea, {\n      autoSize: {\n        minRows: 3\n      },\n      placeholder: \"\\u793C\\u8C8C\\u4EA4\\u6D41\\uFF0C\\u81F3\\u5C115\\u4E2A\\u5B57\\u7B26\"\n    })), __jsx(_Form.Item, {\n      name: \"recv\",\n      valuePropName: \"checked\",\n      noStyle: true\n    }, __jsx(_Checkbox, null, \"\\u6536\\u5230\\u56DE\\u590D\\u65F6\\u4F7F\\u7528\\u90AE\\u4EF6\\u901A\\u77E5\")), __jsx(_Form.Item, {\n      noStyle: true\n    }, __jsx(_Popover, {\n      title: \"\\u5E2E\\u52A9\",\n      content: __jsx(\"div\", null, __jsx(\"p\", null, \"\\u8BC4\\u8BBA\\u652F\\u6301Markdown\\uFF0C\\u5982\\u679C\\u6709\\u4EBA\\u56DE\\u590D\\u4F60\\u7684\\u8BC4\\u8BBA\\uFF0C\\u4F1A\\u6709\\u90AE\\u4EF6\\u63D0\\u9192\\u53D1\\u9001\\u5230\\u4F60\\u7684\\u90AE\\u7BB1\\uFF0C\\u5982\\u679C\\u4E0D\\u60F3\\u67E5\\u770B\\uFF0C\\u53EF\\u4EE5\\u53D6\\u6D88\"), __jsx(\"p\", null, \"\\u5934\\u50CF\\u5C06\\u4F18\\u5148\\u4F7F\\u7528\\u90AE\\u7BB1\\u5BF9\\u5E94Github\\u8D26\\u6237\\u5934\\u50CF,\\u5982\\u679C\\u83B7\\u53D6\\u5931\\u8D25\\u5C06\\u4F7F\\u7528\", __jsx(\"a\", {\n        href: \"https://cn.gravatar.com/\"\n      }, \"Gravatar\"), \"\\u5934\\u50CF\"), __jsx(\"p\", null, \"\\u90AE\\u7BB1\\u5730\\u5740\\u4E0D\\u4F1A\\u5728\\u524D\\u7AEF\\u6E32\\u67D3\\uFF0C\\u53EF\\u4EE5\\u907F\\u514D\\u88AB\\u626B\\u63CF\\u5DE5\\u5177\\u8BB0\\u5F55\\uFF0C\\u4F46\\u4ECD\\u53EF\\u80FD\\u901A\\u8FC7\\u5934\\u50CF\\u5730\\u5740\\u9006\\u63A8\\u51FA\\u90AE\\u7BB1\"), __jsx(\"p\", null, \"\\u8BC4\\u8BBA\\u5185\\u5BB9\\u8BF7\\u9075\\u5B88\\u76F8\\u5E94\\u6CD5\\u5F8B\\u6CD5\\u89C4\\uFF0C\\u5E76\\u4E14\\u8BF7\\u4E0D\\u8981\\u53D1\\u5E03\\u5E7F\\u544A\"))\n    }, __jsx(Icon, {\n      type: \"question-circle\"\n    }))), __jsx(_Form.Item, {\n      noStyle: true\n    }, __jsx(_Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      onClick: onSubmitClick,\n      loading: loading,\n      style: {\n        \"float\": 'right'\n      }\n    }, \"\\u8BC4\\u8BBA\"))))\n  });\n};\n\nvar Comment = function Comment(props) {\n  var comment = props.comment,\n      depth = props.depth,\n      quote = props.quote,\n      parent = props.parent;\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      reply = _React$useState6[0],\n      setReply = _React$useState6[1];\n\n  var time = moment(comment.time);\n  var context = React.useContext(Context);\n\n  var childrenAndEditor = function childrenAndEditor() {\n    return __jsx(Fragment, null, reply ? __jsx(Editor, {\n      id: comment.id,\n      closeEditorCallback: function closeEditorCallback() {\n        return setReply(false);\n      }\n    }) : null, __jsx(CommentList, {\n      comments: comment.children,\n      depth: depth + 1,\n      parent: comment\n    }));\n  };\n\n  var maxDepth = context.big_screen ? 5 : 2;\n  var actions;\n\n  if (quote) {\n    actions = [__jsx(\"span\", {\n      key: \"comment-nested-reply-to\",\n      onClick: function onClick() {\n        return jumpParent(comment.id);\n      }\n    }, \"\\u8DF3\\u8F6C\\u5230\\u8BE5\\u8BC4\\u8BBA\")];\n  } else {\n    actions = [reply ? __jsx(\"span\", {\n      key: \"comment-nested-reply-to\",\n      onClick: function onClick() {\n        return setReply(false);\n      }\n    }, \"\\u53D6\\u6D88\\u56DE\\u590D\", __jsx(Icon, {\n      type: \"close\"\n    })) : __jsx(\"span\", {\n      key: \"comment-nested-reply-to\",\n      onClick: function onClick() {\n        return setReply(true);\n      }\n    }, \"\\u56DE\\u590D\"), __jsx(\"span\", {\n      key: \"comment-nested-reply-to\"\n    }, comment.recv ? __jsx(_Popover, {\n      content: \"\\u5F53\\u4F60\\u56DE\\u590D\\u8BE5\\u8BC4\\u8BBA\\uFF0C\\u8BC4\\u8BBA\\u8005\\u4F1A\\u6536\\u5230\\u90AE\\u4EF6\\u63D0\\u9192\\uFF08\\u4F46\\u662F\\u4ED6/\\u5979\\u4E0D\\u4E00\\u5B9A\\u4F1A\\u770B\\u90AE\\u4EF6\\uFF09\"\n    }, __jsx(Icon, {\n      type: \"mail\"\n    })) : __jsx(_Popover, {\n      content: \"\\u5F53\\u4F60\\u56DE\\u590D\\u8BE5\\u8BC4\\u8BBA\\uFF0C\\u8BC4\\u8BBA\\u8005\\u4E0D\\u4F1A\\u6536\\u5230\\u90AE\\u4EF6\\u63D0\\u9192\\uFF08\\u6240\\u4EE5\\u4F60\\u53EF\\u80FD\\u65E0\\u6CD5\\u5F97\\u5230\\u53CD\\u9988\\uFF09\"\n    }, __jsx(Icon, {\n      type: \"disconnect\"\n    })))];\n  }\n\n  return __jsx(\"div\", {\n    id: quote ? '' : getCommentID(comment.id),\n    className: \"fullWidth\"\n  }, __jsx(_Comment, {\n    style: quote ? {\n      borderLeft: '#ccc 5px solid',\n      paddingLeft: 10\n    } : {},\n    actions: actions,\n    author: comment.email,\n    avatar: __jsx(Avatar, {\n      avatar: comment.avatar\n    }),\n    content: comment.ad ? adWarning : comment.show ? __jsx(\"div\", null, !quote && depth != 1 && depth >= maxDepth ? __jsx(Comment, {\n      comment: parent,\n      depth: depth,\n      quote: true\n    }) : null, __jsx(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: comment.content\n      }\n    })) : delWarning,\n    datetime: __jsx(_Tooltip, {\n      title: time.format('YYYY-MM-DD HH:mm:ss')\n    }, __jsx(\"span\", null, time.fromNow()))\n  }, !quote && depth < maxDepth ? childrenAndEditor() : null), !quote && depth >= maxDepth ? childrenAndEditor() : null);\n};\n\nvar CommentList = function CommentList(props) {\n  var comments = props.comments,\n      depth = props.depth,\n      parent = props.parent,\n      total = props.total,\n      loading = props.loading;\n  return comments.length || depth == 1 ? __jsx(_List, {\n    className: \"comment-list\",\n    header: !!total ? \"\\u5171 \".concat(total, \" \\u6761\\u8BC4\\u8BBA\") : null,\n    itemLayout: \"horizontal\",\n    dataSource: comments,\n    renderItem: function renderItem(comment, idx) {\n      return __jsx(_List.Item, {\n        key: comment.id,\n        style: {\n          padding: 0\n        }\n      }, __jsx(Comment, {\n        comment: comment,\n        depth: depth,\n        quote: false,\n        parent: parent\n      }));\n    },\n    loading: loading === true\n  }) : null;\n};\n\nvar CommentPart = /*#__PURE__*/function (_React$Component) {\n  _inherits(CommentPart, _React$Component);\n\n  var _super = _createSuper(CommentPart);\n\n  function CommentPart(props) {\n    var _this;\n\n    _classCallCheck(this, CommentPart);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"initialComment\", function () {\n      _this.setState({\n        loading: true\n      });\n\n      comments(_this.props.url, function (data) {\n        _this.setState(function () {\n          return {\n            total: data.total,\n            comments: data.comments.reverse(),\n            loading: false\n          };\n        });\n      })[\"finally\"](function () {\n        _this.setState({\n          loading: false\n        });\n      });\n    });\n\n    _this.state = {\n      total: 0,\n      comments: [],\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(CommentPart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initialComment();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        id: \"blotter-comment\"\n      }, __jsx(CommentContext.Provider, {\n        value: {\n          url: this.props.url,\n          callback: this.initialComment\n        }\n      }, __jsx(Editor, {\n        id: \"000000000000\"\n      }), __jsx(CommentList, {\n        comments: this.state.comments,\n        depth: 1,\n        total: this.state.total,\n        loading: this.state.loading\n      })));\n    }\n  }]);\n\n  return CommentPart;\n}(React.Component);\n\nexport default CommentPart;","map":null,"metadata":{},"sourceType":"module"}