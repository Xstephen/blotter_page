{"ast":null,"code":"import \"antd/lib/card/style/css\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/list/style/css\";\nimport _List from \"antd/lib/list\";\nimport \"antd/lib/row/style/css\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/popconfirm/style/css\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/switch/style/css\";\nimport _Switch from \"antd/lib/switch\";\nimport \"antd/lib/date-picker/style/css\";\nimport _DatePicker from \"antd/lib/date-picker\";\nimport \"antd/lib/input-number/style/css\";\nimport _InputNumber from \"antd/lib/input-number\";\nimport \"antd/lib/col/style/css\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/form/style/css\";\nimport _Form from \"antd/lib/form\";\nimport \"antd/lib/input/style/css\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/notification/style/css\";\nimport _notification from \"antd/lib/notification\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport Router, { withRouter } from 'next/router';\nimport { Icon } from '@ant-design/compatible';\nimport { FormOutlined, MinusOutlined, PlusOutlined, FileImageOutlined } from '@ant-design/icons';\nimport moment from 'moment';\nimport MediaQuery from 'react-responsive';\nimport { ControlledEditor } from '@monaco-editor/react/lib/';\nimport Container, { Space } from '@/components/container';\nimport TagSearch from '@/components/tag_search';\nimport PostContent from '@/components/post_content';\nimport { waitUntil } from '@/utils/debounce';\nimport { markdown, adminPost, postEdit } from '@/utils/api';\nimport { dimensionMaxMap } from '@/utils/responsive';\nimport styles from '@/pages/post/post.less';\nimport { Context } from '@/utils/global';\nimport ShowNotification from '@/utils/notification';\nimport { setLocalStorage, getLocalStorage, removeLocalStorage } from '@/utils/storage';\nimport Qiniu from '@/components/upload';\n\nfunction Editor(props) {\n  const {\n    onChange,\n    getRef\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"onChange\", \"getRef\"]);\n\n  const handleEditorChange = (ev, value) => {\n    return onChange(value);\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      width: '100%',\n      height: 'calc(100vh - 20px)',\n      overflow: 'hidden'\n    }\n  }, __jsx(ControlledEditor, _extends({\n    onChange: handleEditorChange\n  }, restProps, {\n    styles: {\n      flex: '1 1 auto'\n    },\n    editorDidMount: (_, editor) => getRef(editor)\n  })));\n}\n\nconst Press = props => {\n  const {\n    initArg,\n    onPressing = () => {},\n    ms = 500\n  } = props,\n        restProps = _objectWithoutProperties(props, [\"initArg\", \"onPressing\", \"ms\"]);\n\n  const [value, setValue] = React.useState(0); //   const [arg, setArg] = React.useState(initArg);\n\n  return __jsx(_Button, _extends({}, restProps, {\n    onMouseDown: e => {\n      var arg = initArg;\n      clearInterval(value);\n      const interval = setInterval(() => {\n        arg = onPressing(arg);\n      }, ms);\n      setValue(interval);\n    },\n    onMouseUp: e => clearInterval(value)\n  }));\n};\n\nconst fieldsName = ['id', 'title', 'url', 'abstract', 'head_image', 'view', 'publish_time', 'edit_time', 'published' //   'raw',\n];\n\nclass PostEdit extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"formRef\", React.createRef());\n\n    _defineProperty(this, \"previewRef\", React.createRef());\n\n    _defineProperty(this, \"now\", moment(new Date()));\n\n    _defineProperty(this, \"editor\", void 0);\n\n    _defineProperty(this, \"getData\", async url => {\n      var r = await adminPost(url);\n      this.formRef.current.setFieldsValue({\n        id: r.id,\n        title: r.title,\n        url: r.url,\n        abstract: r.abstract,\n        head_image: r.head_image,\n        view: r.view,\n        publish_time: moment(new Date(r.publish_time)),\n        //   edit_time: moment(new Date(r.edit_time)),\n        published: r.published //   raw: r.raw,\n\n      });\n      this.setState({\n        tags: r.tags,\n        html: r.content,\n        raw: r.raw,\n        images: !!r.images ? r.images : []\n      }, () => {\n        console.log('got data', r.raw.length);\n        if (!!this.editor) this.editor.setValue(r.raw);\n      });\n    });\n\n    _defineProperty(this, \"onBigScreen\", match => {\n      this.setState({\n        bigScreen: match\n      });\n    });\n\n    _defineProperty(this, \"renderMarkdown\", async source => {\n      this.setState({\n        loading: true\n      });\n      var r = await markdown(source);\n      this.setState({\n        html: r.html,\n        loading: false\n      });\n      return r.html;\n    });\n\n    _defineProperty(this, \"onChange\", value => {\n      waitUntil('post_edit_sync', () => {\n        setLocalStorage(`post-${this.props.router.query.url}`, value);\n\n        if (this.state.preview) {\n          this.renderMarkdown(value);\n        }\n      }, 1000);\n    });\n\n    _defineProperty(this, \"previewClick\", () => {\n      if (!this.state.preview) {\n        this.renderMarkdown(this.editor.getValue());\n      }\n\n      this.setState(state => ({\n        preview: !state.preview\n      }), () => {\n        if (!!this.editor) this.editor.layout();\n      });\n    });\n\n    _defineProperty(this, \"tagOnAdd\", tag => {\n      this.setState(state => {\n        var tags = state.tags;\n        tags.push(tag);\n        return {\n          tags\n        };\n      });\n    });\n\n    _defineProperty(this, \"tagOnDelete\", tag => {\n      this.setState(state => {\n        var tags = state.tags.filter(_tag => _tag.short != tag.short);\n        return {\n          tags\n        };\n      });\n    });\n\n    _defineProperty(this, \"isSidePreview\", () => {\n      return this.state.bigScreen && this.state.preview;\n    });\n\n    _defineProperty(this, \"syncScroll\", (top, height) => {\n      if (this.isSidePreview()) {\n        this.previewRef.current.scrollTop = top / height * this.previewRef.current.scrollHeight + this.state.offset;\n      }\n    });\n\n    _defineProperty(this, \"getValidInput\", async () => {\n      try {\n        var obj = await this.formRef.current.validateFields(fieldsName);\n      } catch (e) {\n        throw e;\n      }\n\n      obj.tags = this.state.tags.map(tag => tag.id);\n      obj.publish_time = obj.publish_time.unix();\n      obj.edit_time = obj.edit_time.unix();\n      obj.raw = this.editor.getValue();\n      obj.images = this.state.images.filter(item => !!item);\n      return obj;\n    });\n\n    _defineProperty(this, \"getInput\", () => {\n      try {\n        var obj = this.formRef.current.getFieldsValue(fieldsName);\n      } catch (e) {\n        throw e;\n      }\n\n      obj.tags = this.state.tags;\n      obj.publish_time = obj.publish_time.format('YYYY-MM-DD HH:mm:ss');\n      obj.edit_time = obj.edit_time.format('YYYY-MM-DD HH:mm:ss');\n      obj.raw = this.editor.getValue();\n      obj.images = this.state.images.filter(item => !!item);\n      return obj;\n    });\n\n    _defineProperty(this, \"submit\", async () => {\n      this.setState({\n        submitDisabled: true\n      });\n\n      try {\n        var obj = await this.getValidInput();\n      } catch (e) {\n        const err = e.errorFields.map(item => item.errors.join(' ')).join('\\n');\n\n        _notification.error({\n          message: '信息错误',\n          description: err\n        });\n\n        this.setState({\n          submitDisabled: false\n        });\n        return;\n      }\n\n      postEdit(obj).then(r => {\n        if (ShowNotification(r)) {\n          Router.push(`/admin/post?url=${obj.url}`);\n          this.getData(obj.url);\n          removeLocalStorage(`post-${this.props.router.query.url}`);\n        }\n      }).finally(() => {\n        this.setState({\n          submitDisabled: false\n        });\n      });\n    });\n\n    _defineProperty(this, \"importImages\", async () => {\n      const html = await this.renderMarkdown(this.editor.getValue());\n      const reg = new RegExp('<img ([^>]*)>', 'g');\n      var images = [];\n\n      do {\n        var result = reg.exec(html);\n\n        if (result !== null) {\n          const part = result[1].split('=');\n          var params = {};\n          var key = '';\n          var end = '';\n\n          for (var i = 0; i < part.length; i++) {\n            if (key === '') {\n              key = part[i];\n              end = part[i + 1][0];\n            } else {\n              const tmp = part[i].split(end);\n              params[key] = tmp[1];\n              key = tmp[2].trim();\n            }\n          }\n\n          if (!!params['src']) {\n            if (!!params['alt'] || !!params['title']) images.push(`${params['src']}#${!!params['title'] ? params['title'] : params['alt']}`);else images.push(params['src']);\n          }\n        }\n      } while (result);\n\n      this.setState({\n        images\n      });\n    });\n\n    _defineProperty(this, \"renderEditor\", () => {\n      const opts = {\n        fontSize: this.state.fontSize,\n        wordWrap: 'on',\n        quickSuggestions: false,\n        acceptSuggestionOnCommitCharacter: false,\n        acceptSuggestionOnEnter: 'off',\n        snippetSuggestions: 'none'\n      };\n      return __jsx(\"div\", {\n        id: \"editor\"\n      }, __jsx(Context.Consumer, null, context => __jsx(Editor, {\n        language: \"markdown\",\n        theme: context.theme == 'default' ? 'light' : 'dark' //   value={this.state.raw}\n        ,\n        getRef: ref => {\n          this.editor = ref;\n          ref.onDidScrollChange(e => {\n            this.syncScroll(e.scrollTop, e.scrollHeight);\n          });\n          if (this.state.raw !== '') ref.setValue(this.state.raw);\n        },\n        options: opts,\n        onChange: this.onChange\n      })));\n    });\n\n    _defineProperty(this, \"renderPreview\", () => {\n      try {\n        var obj = this.getInput();\n      } catch (e) {\n        const err = e.errorFields.map(item => item.errors.join(' ')).join('\\n');\n\n        _notification.error({\n          message: '信息错误',\n          description: err\n        });\n      }\n\n      const post = _objectSpread(_objectSpread({}, obj), {}, {\n        content: this.state.html\n      });\n\n      return __jsx(\"div\", null, __jsx(Icon, {\n        type: this.state.loading ? 'loading' : 'check'\n      }), __jsx(\"article\", {\n        className: styles.post\n      }, __jsx(PostContent, {\n        post: post\n      })));\n    });\n\n    _defineProperty(this, \"renderToolbar\", () => {\n      var md = this.isSidePreview();\n      return __jsx(_Row, {\n        gutter: 15\n      }, __jsx(_Col, {\n        lg: 24\n      }, __jsx(_Form.Item, {\n        name: \"id\"\n      }, __jsx(_Input, {\n        disabled: true,\n        placeholder: \"\\u6587\\u7AE0ID\",\n        addonBefore: \"ID\"\n      }))), __jsx(_Col, {\n        lg: md ? 12 : 6,\n        md: 12\n      }, __jsx(_Form.Item, {\n        name: \"url\",\n        rules: [{\n          required: true,\n          message: '文章必须有链接',\n          whitespace: true\n        }]\n      }, __jsx(_Input, {\n        placeholder: \"\\u6587\\u7AE0\\u94FE\\u63A5\",\n        addonBefore: \"/post/\"\n      }))), __jsx(_Col, {\n        lg: md ? 12 : 6,\n        md: 12\n      }, __jsx(_Form.Item, {\n        name: \"view\"\n      }, __jsx(_InputNumber, {\n        placeholder: \"\\u9605\\u8BFB\\u91CF\",\n        min: 0\n      }))), __jsx(_Col, {\n        lg: md ? 12 : 6,\n        md: 12\n      }, __jsx(_Form.Item, {\n        name: \"publish_time\"\n      }, __jsx(_DatePicker, {\n        showTime: true,\n        placeholder: \"\\u53D1\\u5E03\\u65F6\\u95F4\"\n      }))), __jsx(_Col, {\n        lg: md ? 12 : 6,\n        md: 12\n      }, __jsx(_Form.Item, {\n        name: \"edit_time\"\n      }, __jsx(_DatePicker, {\n        showTime: true,\n        placeholder: \"\\u7F16\\u8F91\\u65F6\\u95F4\"\n      }))), __jsx(_Col, {\n        lg: md ? 12 : 10,\n        md: 12\n      }, __jsx(_Form.Item, {\n        name: \"title\"\n      }, __jsx(_Input, {\n        placeholder: \"\\u6587\\u7AE0\\u6807\\u9898\"\n      }))), __jsx(_Col, {\n        lg: md ? 12 : 8,\n        md: 12\n      }, __jsx(_Form.Item, {\n        name: \"head_image\"\n      }, __jsx(_Input, {\n        placeholder: \"\\u5934\\u56FE\",\n        onChange: e => {\n          this.setState({\n            headImage: e.currentTarget.value\n          });\n        }\n      }))), __jsx(_Col, {\n        lg: md ? 12 : 2,\n        md: 12\n      }, __jsx(_Form.Item, null, __jsx(_Button, {\n        onClick: this.previewClick\n      }, __jsx(Icon, {\n        type: this.state.preview ? 'eye-invisible' : 'eye'\n      })))), __jsx(_Col, {\n        lg: md ? 12 : 2,\n        md: 12\n      }, __jsx(_Form.Item, {\n        name: \"published\",\n        valuePropName: \"checked\"\n      }, __jsx(_Switch, {\n        checkedChildren: \"\\u53D1\\u5E03\",\n        unCheckedChildren: \"\\u8349\\u7A3F\"\n      }))), __jsx(_Col, {\n        lg: md ? 12 : 2,\n        md: 12\n      }, __jsx(_Form.Item, null, __jsx(_Button, {\n        loading: this.state.submitDisabled,\n        onClick: this.submit,\n        type: \"primary\"\n      }, \"\\u63D0\\u4EA4\"))), __jsx(_Col, {\n        lg: md ? 12 : 2,\n        md: 12\n      }, __jsx(_Form.Item, null, __jsx(_Button, {\n        onClick: () => {\n          this.editor.setValue(this.state.draft);\n        }\n      }, \"\\u672C\\u5730\\u6062\\u590D\"))), __jsx(_Col, {\n        lg: md ? 12 : 2,\n        md: 12\n      }, __jsx(_Form.Item, null, __jsx(_InputNumber, {\n        value: this.state.fontSize,\n        onChange: v => this.setState({\n          fontSize: parseInt(v.toString())\n        }, () => {})\n      }))), __jsx(_Col, {\n        lg: md ? 12 : 2,\n        md: 12\n      }, __jsx(_Form.Item, null, __jsx(_Button, {\n        onClick: () => {\n          const now = moment(new Date());\n          this.formRef.current.setFieldsValue({\n            publish_time: now,\n            edit_time: now\n          });\n        }\n      }, \"\\u91CD\\u7F6E\\u65E5\\u671F\"))), __jsx(_Col, {\n        lg: md ? 12 : 2,\n        md: 12\n      }, __jsx(_Form.Item, null, __jsx(_Button, {\n        onClick: this.importImages\n      }, \"\\u5BFC\\u5165\\u56FE\\u7247\"))), __jsx(_Col, {\n        span: 24\n      }, __jsx(_Form.Item, null, __jsx(TagSearch, {\n        onAdd: this.tagOnAdd,\n        onDelete: this.tagOnDelete,\n        tags: this.state.tags\n      }))), __jsx(_Col, {\n        span: 24\n      }, __jsx(_Form.Item, {\n        name: \"abstract\"\n      }, __jsx(_Input.TextArea, {\n        autoSize: {\n          minRows: 5\n        },\n        spellCheck: \"false\",\n        placeholder: \"\\u6587\\u7AE0\\u6458\\u8981\"\n      }))), __jsx(_Col, {\n        span: 24\n      }, __jsx(_List, {\n        style: {\n          maxHeight: '50vh',\n          overflow: 'auto'\n        },\n        size: \"small\",\n        dataSource: this.state.images,\n        renderItem: (image, idx) => __jsx(_List.Item, {\n          key: idx\n        }, __jsx(_Row, {\n          gutter: [5, 5],\n          className: \"fullWidth\",\n          align: \"middle\"\n        }, __jsx(_Col, null, __jsx(\"strong\", null, idx)), __jsx(_Col, null, __jsx(_Popconfirm, {\n          title: \"\\u786E\\u8BA4\\u5220\\u9664\\uFF1F\",\n          onConfirm: () => this.setState(state => ({\n            images: state.images.filter((_, idx2) => idx != idx2)\n          }))\n        }, __jsx(_Button, {\n          danger: true\n        }, \"\\u5220\\u9664\"))), __jsx(_Col, {\n          flex: \"1 1 auto\"\n        }, __jsx(_Input, {\n          value: image,\n          onChange: e => {\n            const value = e.target.value;\n            this.setState(state => {\n              var {\n                images\n              } = state;\n              images[idx] = value;\n              return {\n                images\n              };\n            });\n          }\n        })), __jsx(_Col, null, __jsx(\"img\", {\n          src: image,\n          style: {\n            maxHeight: '100px'\n          }\n        }))))\n      }), __jsx(_Row, {\n        justify: \"end\"\n      }, __jsx(_Col, null, __jsx(_Button, {\n        onClick: () => this.setState(state => {\n          var {\n            images\n          } = state;\n          images.push('');\n          return {\n            images\n          };\n        })\n      }, \"\\u65B0\\u5EFA\\u4E00\\u4E2A\\u56FE\\u7247\")))));\n    });\n\n    _defineProperty(this, \"renderJump\", () => __jsx(_Button, {\n      shape: \"circle\",\n      size: \"large\",\n      type: \"primary\",\n      style: {\n        position: 'fixed',\n        right: '20px',\n        top: '60px',\n        zIndex: 2\n      },\n      onClick: () => {\n        const editor = document.getElementById('editor');\n\n        if (!!editor && editor.offsetTop > 0) {\n          scrollTo(0, editor.offsetTop + 10);\n        }\n      },\n      icon: __jsx(FormOutlined, null)\n    }));\n\n    _defineProperty(this, \"renderOffset\", () => {\n      const diff = 10;\n\n      const scroll = diff => {\n        this.setState(state => ({\n          offset: state.offset + diff\n        }), () => {\n          if (!!this.editor) this.syncScroll(this.editor.getScrollTop(), this.editor.getScrollHeight());\n        });\n      };\n\n      return __jsx(_Button.Group, {\n        style: {\n          position: 'fixed',\n          right: '20px',\n          top: '120px',\n          zIndex: 2\n        }\n      }, __jsx(Press, {\n        initArg: -diff,\n        onClick: () => scroll(-diff),\n        onPressing: arg => {\n          scroll(arg - diff);\n          return arg - diff;\n        },\n        ms: 100,\n        icon: __jsx(MinusOutlined, null)\n      }), __jsx(Press, {\n        initArg: diff,\n        onClick: () => scroll(diff),\n        onPressing: arg => {\n          scroll(arg + diff);\n          return arg + diff;\n        },\n        ms: 100,\n        icon: __jsx(PlusOutlined, null)\n      }));\n    });\n\n    _defineProperty(this, \"renderImages\", () => {\n      return __jsx(\"div\", null, __jsx(_Button, {\n        shape: \"circle\",\n        size: \"large\",\n        type: \"primary\",\n        danger: this.state.upload,\n        style: {\n          position: 'fixed',\n          right: 20,\n          top: 180,\n          zIndex: 2\n        },\n        onClick: () => this.setState(state => ({\n          upload: !state.upload\n        })),\n        icon: __jsx(FileImageOutlined, null)\n      }), __jsx(\"div\", {\n        className: ['upload', 'shadow'].join(' '),\n        style: _objectSpread({\n          right: 120,\n          top: 180\n        }, this.state.upload ? {\n          opacity: 1,\n          visibility: 'visible'\n        } : {\n          opacity: 0,\n          visibility: 'hidden'\n        })\n      }, __jsx(Qiniu, {\n        defaultTab: \"upload\"\n      })));\n    });\n\n    this.state = {\n      raw: '',\n      html: '',\n      preview: false,\n      bigScreen: true,\n      loading: false,\n      tags: [],\n      headImage: '',\n      submitDisabled: false,\n      draft: '',\n      offset: 0,\n      fontSize: 16,\n      images: [],\n      upload: false\n    };\n  }\n\n  componentDidMount() {\n    var url = this.props.router.query.url;\n    const value = getLocalStorage(`post-${url}`);\n    this.setState({\n      draft: value\n    });\n\n    if (url != '' && typeof url != 'undefined') {\n      this.getData(url);\n    }\n  }\n\n  render() {\n    return __jsx(Container, {\n      xxl: 20,\n      xl: 20,\n      lg: 20,\n      md: 24,\n      sm: 24,\n      xs: 24\n    }, __jsx(Context.Consumer, null, context => __jsx(Head, null, __jsx(\"title\", null, `文章编辑|后台|${context.blog_name}`))), __jsx(MediaQuery, {\n      minDeviceWidth: dimensionMaxMap.lg,\n      onChange: this.onBigScreen\n    }, null), this.renderJump(), this.renderOffset(), this.renderImages(), __jsx(_Row, {\n      gutter: 5\n    }, __jsx(_Col, {\n      span: this.isSidePreview() ? 12 : 24\n    }, __jsx(_Card, null, __jsx(_Form, {\n      ref: this.formRef,\n      initialValues: {\n        id: '',\n        title: '',\n        url: '',\n        abstract: '',\n        head_image: '',\n        view: 0,\n        publish_time: this.now,\n        edit_time: this.now,\n        published: false,\n        raw: ''\n      }\n    }, __jsx(Space, null, this.renderToolbar(), this.state.preview && !this.state.bigScreen ? this.renderPreview() : this.renderEditor())))), this.isSidePreview() ? __jsx(_Col, {\n      span: 12\n    }, __jsx(\"div\", {\n      className: styles.preview + ' shadow',\n      ref: this.previewRef\n    }, __jsx(_Card, null, this.renderPreview(), __jsx(\"div\", {\n      style: {\n        height: 'calc(100vh - 20px)'\n      }\n    })))) : null));\n  }\n\n}\n\n_defineProperty(PostEdit, \"defaultProps\", {});\n\nexport default withRouter(PostEdit);","map":null,"metadata":{},"sourceType":"module"}