{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\n\nvar FocusDiv = /*#__PURE__*/function (_React$Component) {\n  _inherits(FocusDiv, _React$Component);\n\n  var _super = _createSuper(FocusDiv);\n\n  function FocusDiv(props) {\n    var _this;\n\n    _classCallCheck(this, FocusDiv);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"ref\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"judgeHeight\", function () {\n      var windowTop = document.documentElement.scrollTop;\n      var windowHeight = document.documentElement.clientHeight;\n      var elementTop = _this.ref.current.offsetTop;\n      var elementHeight = _this.ref.current.offsetHeight;\n      var elementCenter = elementTop + elementHeight / 2;\n      var windowCenter = windowTop + windowHeight / 2;\n      var distance = Math.abs(elementCenter - windowCenter);\n\n      if (windowHeight * _this.props.distance / 2 >= distance) {\n        _this.setState({\n          \"in\": true\n        });\n      } else {\n        _this.setState({\n          \"in\": false\n        });\n      }\n    });\n\n    _this.state = {\n      \"in\": false\n    };\n    return _this;\n  }\n\n  _createClass(FocusDiv, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('scroll', this.judgeHeight);\n      this.judgeHeight();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener('scroll', this.judgeHeight);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        ref: this.ref\n      }, this.props.children(this.state[\"in\"]));\n    }\n  }]);\n\n  return FocusDiv;\n}(React.Component);\n\n_defineProperty(FocusDiv, \"defaultProps\", {\n  distance: 0.25\n});\n\nexport default FocusDiv;","map":null,"metadata":{},"sourceType":"module"}