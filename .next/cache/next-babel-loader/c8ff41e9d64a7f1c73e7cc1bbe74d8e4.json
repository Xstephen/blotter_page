{"ast":null,"code":"import \"antd/lib/page-header/style/css\";\nimport _PageHeader from \"antd/lib/page-header\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/skeleton/style/css\";\nimport _Skeleton from \"antd/lib/skeleton\";\nimport \"antd/lib/anchor/style/css\";\nimport _Anchor from \"antd/lib/anchor\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Link from 'next/link';\nimport { EyeOutlined, CalendarOutlined, EditOutlined, TagOutlined } from '@ant-design/icons';\nimport moment from 'moment';\nimport Image, { setImageLightbox, setSVGLightbox } from '@/components/image';\nimport If from '@/components/if';\nimport TagPart from '@/components/tag';\nimport { Context } from '@/utils/global';\nimport { travels_get_url } from '@/utils/api';\nimport styles from '@/pages/post/post.less';\nimport Carousel from './carousel';\nimport { Space } from './container';\nimport Head from 'next/head';\n\nfunction findAnchors(text) {\n  var re = new RegExp(`<h([1-6]) id=\"(.*)\">(.*)</h\\\\1>`, 'g');\n  var result_list = [];\n\n  do {\n    var result = re.exec(text);\n\n    if (result !== null) {\n      result_list.push({\n        id: `#${result[2]}`,\n        name: result[3],\n        level: parseInt(result[1]),\n        children: []\n      });\n    }\n  } while (result);\n\n  var anchors = [];\n\n  var insert = (lst, value) => {\n    if (lst.length > 0 && lst[lst.length - 1].level < value.level) {\n      insert(lst[lst.length - 1].children, value);\n    } else {\n      lst.push(value);\n    }\n  };\n\n  result_list.map(anchor => {\n    insert(anchors, anchor);\n  });\n  anchors.push({\n    id: '#blotter-comment',\n    name: '评论区',\n    level: 1,\n    children: []\n  });\n  return anchors;\n}\n\nfunction renderAnchor(anchor) {\n  return __jsx(_Anchor.Link, {\n    key: `${anchor.id}|${anchor.name}`,\n    href: anchor.id,\n    title: anchor.name\n  }, anchor.children.map(renderAnchor));\n}\n\nclass PostContent extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"isTravel\", () => {\n      return this.props.post.tags.filter(item => item.name === '游记' && item.short === 'travels').length > 0;\n    });\n\n    _defineProperty(this, \"getTravelData\", () => {\n      travels_get_url(this.props.post.url).then(r => {\n        if (r.exist) {\n          this.setState({\n            travel: r.travel\n          });\n        }\n      }).catch(console.error);\n    });\n\n    _defineProperty(this, \"renderTravel\", () => {\n      const travel = this.state.travel;\n\n      if (!!travel) {\n        const lnglat = `${travel.lng},${travel.lat}`;\n        return __jsx(\"details\", null, __jsx(\"summary\", null, \"\\u6E38\\u8BB0\\u8BE6\\u7EC6\\u4FE1\\u606F\"), __jsx(Image, {\n          clickable: true,\n          height: '512px',\n          maxHeight: \"50vh\",\n          src: `https://restapi.amap.com/v3/staticmap?location=${lnglat}&zoom${travel.zoom}&scale=2&size=1024*1024&markers=mid,,A:${lnglat}&key=5918961af3c0ffafa1a3cb1056556c98`,\n          alt: `${travel.name}地图`,\n          title: `${moment(travel.time, 'X').format('YYYY-MM-DD')} 于 ${travel.name}`\n        }), __jsx(\"p\", {\n          style: {\n            textAlign: 'center',\n            fontSize: '1.25em'\n          }\n        }, \"\\u8BE5\\u6587\\u7AE0\\u662F\\u4E00\\u7BC7 \", __jsx(\"strong\", null, moment(travel.time, 'X').format('YYYY-MM-DD')), \" \\u4E8E\", ' ', __jsx(\"strong\", null, travel.name), \" \\u7684\\u6E38\\u8BB0\\uFF0C \\u66F4\\u591A\\u6E38\\u8BB0\\u89C1\", __jsx(\"a\", {\n          href: \"/apps/travels\",\n          target: \"_blank\"\n        }, \"\\u6E38\\u8BB0\\u5217\\u8868\")));\n      } else {\n        return null;\n      }\n    });\n\n    _defineProperty(this, \"renderAnchors\", () => {\n      const anchors = findAnchors(this.props.post.content);\n      const {\n        container\n      } = this.props;\n      var anchorID;\n\n      if (!!container) {\n        container.onscroll = ev => {\n          if (!anchorID) {\n            anchorID = document.getElementById('anchor');\n          }\n\n          anchorID.style.top = `${50 + container.scrollTop}`;\n        };\n      }\n\n      return __jsx(Context.Consumer, null, context => context.big_screen ? __jsx(\"div\", {\n        id: \"anchor\",\n        style: {\n          maxHeight: 'calc(100% - 100px)',\n          position: container ? 'absolute' : 'fixed',\n          top: '50px',\n          right: '30px',\n          width: '15%',\n          zIndex: 5\n        }\n      }, __jsx(_Anchor, {\n        getContainer: !!container ? () => container : undefined,\n        offsetTop: 10,\n        style: {\n          background: 'transparent'\n        }\n      }, anchors.map(renderAnchor))) : null);\n    });\n\n    this.state = {\n      travel: undefined\n    };\n  }\n\n  resetImage() {\n    const containers = document.getElementsByClassName('image');\n\n    for (var i = 0; i < containers.length; i++) {\n      const imgs = containers[i].getElementsByTagName('img');\n\n      for (var j = 0; j < imgs.length; j++) {\n        setImageLightbox(imgs[j]);\n      }\n    }\n\n    const post_content = document.getElementsByClassName('post-content');\n\n    if (post_content.length > 0) {\n      const svgs = post_content[0].getElementsByTagName('svg');\n\n      for (var i = 0; i < svgs.length; i++) {\n        const svg = svgs[i];\n        setSVGLightbox(svg);\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.resetImage();\n\n    if (this.isTravel()) {\n      this.getTravelData();\n    }\n  }\n\n  componentDidUpdate() {\n    this.resetImage();\n  }\n\n  render() {\n    return this.props.post === undefined ? __jsx(_Skeleton, {\n      active: true\n    }) : __jsx(\"article\", {\n      className: styles.post\n    }, __jsx(Head, null, this.props.post.content.indexOf('katex') != -1 ? __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.11.1/katex.min.css\",\n      integrity: \"sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq\",\n      crossOrigin: \"anonymous\"\n    }) : null), __jsx(Space, {\n      size: 20\n    }, __jsx(_PageHeader, {\n      className: \"shadow\",\n      title: this.props.post.title\n    }, __jsx(Space, null, __jsx(Space, {\n      direction: \"horizontal\"\n    }, __jsx(\"div\", null, __jsx(EyeOutlined, {\n      className: \"right5\"\n    }), this.props.post.view), __jsx(\"div\", null, __jsx(CalendarOutlined, {\n      className: \"right5\"\n    }), this.props.post.publish_time), this.props.post.publish_time == this.props.post.edit_time ? null : __jsx(\"div\", null, __jsx(EditOutlined, {\n      className: \"right5\"\n    }), this.props.post.edit_time), __jsx(Context.Consumer, null, context => (context.user.permission & 1) == 1 ? __jsx(Link, {\n      href: `/admin/post?url=${this.props.post.url}`\n    }, __jsx(_Button, {\n      type: \"primary\",\n      size: \"small\"\n    }, \"\\u7F16\\u8F91\")) : null)), __jsx(If, {\n      condition: !!this.props.post.abstract\n    }, __jsx(\"blockquote\", null, this.props.post.abstract)), __jsx(\"div\", null, __jsx(TagOutlined, {\n      className: \"right20\"\n    }), this.props.post.tags.length > 0 ? this.props.post.tags.map(tag => __jsx(TagPart, {\n      key: tag.short,\n      tag: tag\n    })) : __jsx(\"span\", null, \"\\u65E0\\u6807\\u7B7E\")))), this.renderTravel(), !!this.props.post.images && this.props.post.images.length > 0 ? __jsx(Carousel, {\n      images: this.props.post.images,\n      height: '500px',\n      maxHeight: '50vh',\n      autoplay: true\n    }) : null, __jsx(\"section\", {\n      className: \"post-content\",\n      dangerouslySetInnerHTML: {\n        __html: this.props.post.content\n      }\n    }), this.renderAnchors()));\n  }\n\n}\n\nexport default PostContent;","map":null,"metadata":{},"sourceType":"module"}