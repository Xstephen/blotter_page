{"ast":null,"code":"import \"antd/lib/tabs/style/css\";\nimport _Tabs from \"antd/lib/tabs\";\nimport \"antd/lib/card/style/css\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/typography/style/css\";\nimport _Typography from \"antd/lib/typography\";\nimport \"antd/lib/popconfirm/style/css\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/upload/style/css\";\nimport _Upload from \"antd/lib/upload\";\nimport \"antd/lib/notification/style/css\";\nimport _notification from \"antd/lib/notification\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/select/style/css\";\nimport _Select from \"antd/lib/select\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { SyncOutlined, SaveOutlined, DeleteOutlined } from '@ant-design/icons';\nimport * as qiniu from 'qiniu-js';\nimport { Space } from '@/components/container';\nimport Image from '@/components/image';\nimport { qiniu_get_buckets, qiniu_get_images, qiniu_get_token } from '@/utils/api';\nconst prefixs = ['post', 'tags', 'travels'];\nconst img_file_type = ['psd', 'jpg', 'jpeg', 'png', 'gif', 'webp', 'tiff', 'bmp'];\n\nfunction generateThumbnail(img) {\n  if (img_file_type.indexOf(img.split('.').slice(-1)[0]) != -1) return `${img}?imageView2/0/w/128/h/128/interlace/1/q/50`;else img;\n}\n\nfunction BucketSelector(props) {\n  const {\n    bucket,\n    prefix,\n    onChange = () => {},\n    refresh = () => {}\n  } = props;\n  const [loading, setLoading] = React.useState(false);\n  const [buckets, setBuckets] = React.useState([]);\n\n  const initial = () => {\n    setLoading(true);\n    qiniu_get_buckets().then(r => {\n      setBuckets(r.buckets);\n      if (bucket == '' && r.buckets.length != 0) onChange(r.buckets[0], '');\n    }).catch(console.error).finally(() => setLoading(false));\n  };\n\n  React.useEffect(initial, []);\n  return __jsx(Space, {\n    direction: \"horizontal\"\n  }, __jsx(\"strong\", null, \"\\u5B58\\u50A8\\u7A7A\\u95F4\\uFF1A\"), __jsx(_Select, {\n    value: bucket,\n    onChange: b => onChange(b, prefix),\n    loading: loading\n  }, buckets.map(b => __jsx(_Select.Option, {\n    key: b,\n    value: b\n  }, b))), __jsx(_Button, {\n    onClick: initial,\n    icon: __jsx(SyncOutlined, {\n      spin: loading\n    })\n  }), __jsx(_Select, {\n    value: prefix,\n    onChange: p => onChange(bucket, p),\n    loading: loading\n  }, prefixs.map(p => __jsx(_Select.Option, {\n    key: p,\n    value: p\n  }, p))), __jsx(_Button, {\n    onClick: refresh\n  }, \"\\u5237\\u65B0\\u56FE\\u7247\"));\n}\n\nfunction Upload(props) {\n  const {\n    bucket,\n    prefix\n  } = props;\n\n  const upload = async file => {\n    const token = (await qiniu_get_token()).token;\n    const filename = !!prefix ? `${prefix}/${file.name}` : file.name;\n    const observable = qiniu.upload(file, filename, token, {}, {});\n    const subscription = observable.subscribe({\n      next(res) {\n        console.log(res);\n      },\n\n      error(err) {\n        _notification.error({\n          message: `${filename} 上传发生错误`,\n          description: `${err}`\n        });\n\n        console.error(err);\n      },\n\n      complete(res) {\n        _notification.success({\n          message: `${filename} 上传成功`\n        });\n      }\n\n    });\n  };\n\n  return __jsx(_Upload.Dragger, {\n    name: 'file',\n    multiple: true,\n    customRequest: async opts => {\n      console.log(opts);\n      upload(opts.file);\n    },\n    showUploadList: false\n  }, __jsx(\"div\", {\n    style: {\n      height: 100,\n      width: '100%'\n    }\n  }, __jsx(\"p\", null, \"\\u5C06\\u6587\\u4EF6\\u62D6\\u62FD\\u5230\\u6B64\\u5904\\u4E0A\\u4F20\")));\n}\n\nfunction ImageList(props) {\n  const {\n    bucket,\n    prefix,\n    refresh = () => {}\n  } = props;\n  const [images, setImages] = React.useState([]);\n  const [marker, setMarker] = React.useState('');\n  const [hasNext, setHasNext] = React.useState(false);\n  const [loading, setLoading] = React.useState(false);\n  const [id, setID] = React.useState(0);\n  const refreshRef = React.useRef(() => getData(bucket, prefix, ''));\n  React.useEffect(() => {\n    refresh(refreshRef);\n  }, [bucket, prefix]);\n\n  const getData = (b, p, m) => {\n    console.log(b, p, m);\n    setLoading(true);\n    var thisID = 0;\n    setID(i => {\n      thisID = i + 1;\n      return thisID;\n    });\n    qiniu_get_images(b, p, m, 5).then(r => {\n      setID(newID => {\n        console.log(b, p, m, thisID, newID);\n\n        if (thisID == newID) {\n          setImages(images => images.concat(r.files));\n          setMarker(r.marker);\n          setHasNext(r.has_next);\n        }\n\n        return newID;\n      });\n    }).catch(console.error).finally(() => {\n      setLoading(false);\n    });\n  };\n\n  React.useEffect(() => getData(bucket, '', ''), [bucket]);\n  React.useEffect(() => {\n    setImages([]);\n    setMarker('');\n    setHasNext(false);\n    console.log('clear');\n    getData(bucket, prefix, '');\n  }, [prefix]);\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column'\n    }\n  }, __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-evenly',\n      flexWrap: 'wrap',\n      alignContent: 'center',\n      flexDirection: 'row'\n    }\n  }, images.map((image, idx) => __jsx(_Card, {\n    style: {\n      width: 128,\n      margin: 10\n    },\n    size: \"small\",\n    cover: __jsx(Image, {\n      src: image.name,\n      thumbnail: generateThumbnail(image.name),\n      height: \"128px\",\n      width: \"128px\",\n      clickable: true\n    }),\n    actions: [__jsx(SaveOutlined, null), __jsx(_Popconfirm, {\n      title: \"\\u786E\\u5B9A\\u5220\\u9664\\uFF1F\",\n      onConfirm: () => {}\n    }, __jsx(DeleteOutlined, {\n      style: {\n        color: 'red'\n      }\n    }))]\n  }, __jsx(_Typography.Text, {\n    ellipsis: true,\n    copyable: true,\n    editable: {\n      onChange: () => {}\n    }\n  }, image.name)))), __jsx(_Button, {\n    onClick: () => getData(bucket, prefix, marker),\n    disabled: !hasNext,\n    loading: loading\n  }, \"\\u83B7\\u53D6\\u66F4\\u591A\"));\n}\n\nfunction Qiniu(props) {\n  const {\n    defaultTab = 'upload'\n  } = props;\n  const [bucket, setBucket] = React.useState('');\n  const [prefix, setPrefix] = React.useState('');\n  const [ref, setRef] = React.useState(undefined);\n  const setState = React.useCallback((b, p) => {\n    console.log(b, p, bucket, prefix);\n    if (b !== bucket) setBucket(b);\n    if (p !== prefix) setPrefix(p);\n  }, [bucket, prefix]);\n  return __jsx(Space, {\n    direction: \"vertical\"\n  }, __jsx(BucketSelector, {\n    bucket: bucket,\n    prefix: prefix,\n    onChange: setState,\n    refresh: !!ref ? ref.current : () => {}\n  }), __jsx(_Tabs, {\n    defaultValue: defaultTab,\n    tabPosition: \"left\"\n  }, __jsx(_Tabs.TabPane, {\n    tab: \"\\u4E0A\\u4F20\\u56FE\\u7247\",\n    key: \"upload\"\n  }, __jsx(Upload, {\n    bucket: bucket,\n    prefix: prefix\n  })), __jsx(_Tabs.TabPane, {\n    tab: \"\\u56FE\\u7247\\u5217\\u8868\",\n    key: \"list\"\n  }, __jsx(ImageList, {\n    bucket: bucket,\n    prefix: prefix\n  }))));\n}\n\nexport default Qiniu;\nexport { BucketSelector, Upload, ImageList };","map":null,"metadata":{},"sourceType":"module"}