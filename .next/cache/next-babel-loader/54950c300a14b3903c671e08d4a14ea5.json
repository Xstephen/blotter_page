{"ast":null,"code":"import \"antd/lib/card/style/css\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/date-picker/style/css\";\nimport _DatePicker from \"antd/lib/date-picker\";\nimport \"antd/lib/popconfirm/style/css\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/button/style/css\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/checkbox/style/css\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport \"antd/lib/typography/style/css\";\nimport _Typography from \"antd/lib/typography\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Head from 'next/head';\nimport { Icon } from '@ant-design/compatible';\nimport Container from '@/components/container';\nimport DragableTable from '@/components/dragable_table';\nimport { Context } from '@/utils/global';\nimport { friends, friendsSet } from '@/utils/api';\nimport ShowNotification from '@/utils/notification';\nimport randomString from '@/utils/random';\nimport moment from 'moment';\n\nclass AdminFriendList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getData\", async () => {\n      this.setState({\n        loading: true\n      });\n      var r = await friends();\n      this.setState({\n        data: r,\n        loading: false\n      });\n    });\n\n    _defineProperty(this, \"renderEditableCell\", (idx, key) => {\n      const width = this.columns.find(item => item.key == key).width;\n      const padding = 16;\n      var style = {\n        width: undefined\n      };\n\n      if (typeof width === 'number') {\n        style.width = width - padding * 2;\n      } else {\n        style.width = `calc(width - ${padding * 2}px)`;\n      }\n\n      return __jsx(\"div\", {\n        style: style\n      }, __jsx(_Typography.Text, {\n        style: {\n          width: '100%'\n        },\n        ellipsis: true,\n        editable: {\n          onChange: value => {\n            this.setState(state => {\n              var {\n                data\n              } = state;\n              data[idx][key] = value;\n              data.map(d => {\n                d.posts = d.posts.map(dd => dd);\n                return d;\n              });\n              return {\n                data\n              };\n            });\n          }\n        }\n      }, this.state.data[idx][key]));\n    });\n\n    _defineProperty(this, \"columns\", [{\n      title: '名称',\n      key: 'name',\n      dataIndex: 'name',\n      width: 150,\n      ellipsis: true,\n      render: (_, __, idx) => this.renderEditableCell(idx, 'name')\n    }, {\n      title: '简介',\n      key: 'description',\n      dataIndex: 'description',\n      width: 200,\n      ellipsis: true,\n      render: (_, __, idx) => this.renderEditableCell(idx, 'description')\n    }, {\n      title: '链接',\n      key: 'link',\n      dataIndex: 'link',\n      width: 200,\n      ellipsis: true,\n      render: (_, __, idx) => this.renderEditableCell(idx, 'link')\n    }, {\n      title: 'RSS',\n      key: 'rss',\n      dataIndex: 'rss',\n      width: 200,\n      ellipsis: true,\n      render: (_, __, idx) => this.renderEditableCell(idx, 'rss')\n    }, {\n      title: '出错',\n      key: 'error',\n      dataIndex: 'error',\n      width: 50,\n      ellipsis: true,\n      render: (_, __, idx) => __jsx(_Checkbox, {\n        checked: !!this.state.data[idx].error,\n        onChange: v => {\n          const e = v.target.checked;\n          this.setState(state => {\n            var {\n              data\n            } = state;\n            data[idx].error = e;\n            data.map(d => {\n              d.posts = d.posts.map(dd => dd);\n              return d;\n            });\n            return {\n              data\n            };\n          });\n        }\n      })\n    }, {\n      title: '图片',\n      key: 'image',\n      dataIndex: 'image',\n      width: 200,\n      ellipsis: true,\n      render: (_, __, idx) => this.renderEditableCell(idx, 'image')\n    }, {\n      title: '图片预览',\n      key: 'image_preview',\n      width: 100,\n      ellipsis: true,\n      render: (_, __, idx) => __jsx(\"img\", _extends({\n        width: '50px',\n        src: this.state.data[idx].image\n      }, {\n        referrerPolicy: 'no-referrer'\n      }))\n    }, {\n      title: '操作',\n      key: 'op',\n      render: (text, record, index) => __jsx(_Popconfirm, {\n        title: \"\\u771F\\u7684\\u8981\\u5220\\u9664\\u4E48\\uFF1F\",\n        onConfirm: () => {\n          this.setState(state => {\n            var data = state.data.filter(item => item.name !== record.name);\n            data.map(d => {\n              d.posts = d.posts.map(dd => dd);\n              return d;\n            });\n            return {\n              data\n            };\n          });\n        },\n        okText: \"\\u5220\\u9664\\uFF01\",\n        cancelText: \"\\u7B97\\u4E86\"\n      }, __jsx(_Button, {\n        size: \"small\",\n        danger: true\n      }, __jsx(Icon, {\n        type: \"delete\"\n      }), \"\\u5220\\u9664\"))\n    }]);\n\n    _defineProperty(this, \"renderSubTableHead\", index => __jsx(\"div\", {\n      style: {\n        textAlign: 'right'\n      }\n    }, __jsx(_Button, {\n      type: \"primary\",\n      onClick: () => {\n        this.setState(state => {\n          var {\n            data\n          } = state;\n          data[index].posts.unshift({\n            title: randomString(),\n            link: '',\n            time: 0\n          });\n          data.map(d => {\n            d.posts = d.posts.map(dd => dd);\n            return d;\n          });\n          return {\n            data\n          };\n        });\n      }\n    }, __jsx(Icon, {\n      type: \"plus\"\n    }), \"\\u65B0\\u5EFA\\u6587\\u7AE0\")));\n\n    _defineProperty(this, \"renderTableHead\", () => __jsx(\"div\", {\n      style: {\n        textAlign: 'right'\n      }\n    }, __jsx(_Button, {\n      onClick: () => {\n        this.setState(state => {\n          var {\n            data\n          } = state;\n          data.push({\n            name: randomString(),\n            link: '',\n            image: '',\n            description: '',\n            rss: '',\n            posts: [],\n            error: false\n          });\n          data = data.map(d => {\n            d.posts = d.posts.map(dd => dd);\n            return d;\n          });\n          return {\n            data\n          };\n        });\n      }\n    }, __jsx(Icon, {\n      type: \"plus\"\n    }), \"\\u65B0\\u5EFA\\u8BA2\\u9605\"), ' ', __jsx(_Button, {\n      type: \"primary\",\n      loading: this.state.submitLoading,\n      onClick: async () => {\n        this.setState({\n          submitLoading: true\n        });\n        var r = await friendsSet(this.state.data);\n        ShowNotification(r);\n        this.setState({\n          submitLoading: false\n        });\n      }\n    }, __jsx(Icon, {\n      type: \"save\"\n    }), \"\\u4FDD\\u5B58\\u4FEE\\u6539\")));\n\n    _defineProperty(this, \"renderExpand\", (record, index, indent, expanded) => {\n      const columns = [{\n        key: 'title',\n        title: '标题',\n        dataIndex: 'title',\n        width: 400,\n        render: (_, __, idx) => renderSubEditableCell(index, idx, 'title')\n      }, {\n        key: 'link',\n        title: '链接',\n        dataIndex: 'link',\n        width: 400,\n        render: (_, __, idx) => renderSubEditableCell(index, idx, 'link')\n      }, {\n        key: 'time',\n        title: '日期',\n        dataIndex: 'time',\n        width: 400,\n        render: (_, __, idx) => __jsx(_DatePicker, {\n          showTime: true,\n          value: moment(this.state.data[index].posts[idx].time, 'X'),\n          onChange: e => {\n            this.setState(state => {\n              var {\n                data\n              } = state;\n              data[index].posts[idx].time = e.unix();\n              data.map(d => {\n                d.posts = d.posts.map(dd => dd);\n                return d;\n              });\n              return {\n                data\n              };\n            });\n          }\n        })\n      }, {\n        title: '操作',\n        dataIndex: 'op',\n        render: (_, record, idx) => __jsx(_Popconfirm, {\n          title: \"\\u771F\\u7684\\u8981\\u5220\\u9664\\u4E48\\uFF1F\",\n          onConfirm: () => {\n            this.setState(state => {\n              var data = state.data;\n              data[index].posts = data[index].posts.filter(item => item.title !== record.title);\n              data.map(d => {\n                d.posts = d.posts.map(dd => dd);\n                return d;\n              });\n              return {\n                data\n              };\n            });\n          },\n          okText: \"\\u5220\\u9664\\uFF01\",\n          cancelText: \"\\u7B97\\u4E86\"\n        }, __jsx(_Button, {\n          size: \"small\",\n          danger: true\n        }, __jsx(Icon, {\n          type: \"delete\"\n        }), \"\\u5220\\u9664\"))\n      }];\n\n      const renderSubEditableCell = (index, idx, key) => {\n        const width = columns.find(item => item.key == key).width;\n        const padding = 16;\n        var style = {\n          width: undefined\n        };\n\n        if (typeof width === 'number') {\n          style.width = width - padding * 2;\n        } else {\n          style.width = `calc(width - ${padding * 2}px)`;\n        }\n\n        return __jsx(\"div\", {\n          style: style\n        }, __jsx(_Typography.Text, {\n          style: {\n            width: '100%'\n          },\n          ellipsis: true,\n          editable: {\n            onChange: value => {\n              this.setState(state => {\n                var {\n                  data\n                } = state;\n                data[index].posts[idx][key] = value;\n                data.map(d => {\n                  d.posts = d.posts.map(dd => dd);\n                  return d;\n                });\n                return {\n                  data\n                };\n              });\n            }\n          }\n        }, this.state.data[index].posts[idx][key]));\n      };\n\n      return __jsx(DragableTable, {\n        rowKey: (record, idx) => `${record.title}_${record.link}_${idx}`,\n        columns: columns,\n        dataSource: record.posts,\n        pagination: false,\n        showHeader: false,\n        scroll: {\n          x: true\n        },\n        title: () => this.renderSubTableHead(index),\n        size: \"small\",\n        dragKey: `${index}`,\n        moveRow: (i, j) => {\n          this.setState(state => {\n            var data = state.data;\n            var temp = data[index].posts[i];\n            data[index].posts[i] = data[index].posts[j];\n            data[index].posts[j] = temp;\n            data.map(d => {\n              d.posts = d.posts.map(dd => dd);\n              return d;\n            });\n            return {\n              data\n            };\n          });\n        },\n        style: {\n          background: 'transparent'\n        }\n      });\n    });\n\n    this.state = {\n      loading: false,\n      data: [],\n      submitLoading: false\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    return __jsx(Container, {\n      lg: 20,\n      md: 20,\n      sm: 24,\n      xs: 24\n    }, __jsx(Context.Consumer, null, context => __jsx(Head, null, __jsx(\"title\", null, `优秀博客订阅|后台|${context.blog_name}`))), __jsx(_Card, null, __jsx(DragableTable, {\n      columns: this.columns,\n      dataSource: this.state.data,\n      loading: this.state.loading,\n      pagination: false,\n      expandedRowRender: this.renderExpand,\n      title: () => this.renderTableHead(),\n      rowKey: (col, idx) => `${col.name}_${idx}`,\n      dragKey: \"root\",\n      scroll: {\n        x: true\n      },\n      moveRow: (i, j) => {\n        this.setState(state => {\n          var {\n            data\n          } = state;\n          var temp = data[i];\n          data[i] = data[j];\n          data[j] = temp;\n          data.map(d => {\n            d.posts = d.posts.map(dd => dd);\n            return d;\n          });\n          return {\n            data\n          };\n        });\n      },\n      size: \"small\"\n    })));\n  }\n\n}\n\n_defineProperty(AdminFriendList, \"defaultProps\", {});\n\nexport default AdminFriendList;","map":null,"metadata":{},"sourceType":"module"}